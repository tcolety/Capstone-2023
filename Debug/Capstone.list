
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007de4  08007de4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007de4  08007de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  08007df8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08007df8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1a7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e5  00000000  00000000  0002b1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bf7  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1fb  00000000  00000000  0004599f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f24e  00000000  00000000  00053b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000d2e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d1c 	.word	0x08007d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08007d1c 	.word	0x08007d1c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_frsub>:
 8000928:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800092c:	e002      	b.n	8000934 <__addsf3>
 800092e:	bf00      	nop

08000930 <__aeabi_fsub>:
 8000930:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000934 <__addsf3>:
 8000934:	0042      	lsls	r2, r0, #1
 8000936:	bf1f      	itttt	ne
 8000938:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800093c:	ea92 0f03 	teqne	r2, r3
 8000940:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000944:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000948:	d06a      	beq.n	8000a20 <__addsf3+0xec>
 800094a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800094e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000952:	bfc1      	itttt	gt
 8000954:	18d2      	addgt	r2, r2, r3
 8000956:	4041      	eorgt	r1, r0
 8000958:	4048      	eorgt	r0, r1
 800095a:	4041      	eorgt	r1, r0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	2b19      	cmp	r3, #25
 8000962:	bf88      	it	hi
 8000964:	4770      	bxhi	lr
 8000966:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800096e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000972:	bf18      	it	ne
 8000974:	4240      	negne	r0, r0
 8000976:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800097e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4249      	negne	r1, r1
 8000986:	ea92 0f03 	teq	r2, r3
 800098a:	d03f      	beq.n	8000a0c <__addsf3+0xd8>
 800098c:	f1a2 0201 	sub.w	r2, r2, #1
 8000990:	fa41 fc03 	asr.w	ip, r1, r3
 8000994:	eb10 000c 	adds.w	r0, r0, ip
 8000998:	f1c3 0320 	rsb	r3, r3, #32
 800099c:	fa01 f103 	lsl.w	r1, r1, r3
 80009a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a4:	d502      	bpl.n	80009ac <__addsf3+0x78>
 80009a6:	4249      	negs	r1, r1
 80009a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b0:	d313      	bcc.n	80009da <__addsf3+0xa6>
 80009b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b6:	d306      	bcc.n	80009c6 <__addsf3+0x92>
 80009b8:	0840      	lsrs	r0, r0, #1
 80009ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80009be:	f102 0201 	add.w	r2, r2, #1
 80009c2:	2afe      	cmp	r2, #254	; 0xfe
 80009c4:	d251      	bcs.n	8000a6a <__addsf3+0x136>
 80009c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ce:	bf08      	it	eq
 80009d0:	f020 0001 	biceq.w	r0, r0, #1
 80009d4:	ea40 0003 	orr.w	r0, r0, r3
 80009d8:	4770      	bx	lr
 80009da:	0049      	lsls	r1, r1, #1
 80009dc:	eb40 0000 	adc.w	r0, r0, r0
 80009e0:	3a01      	subs	r2, #1
 80009e2:	bf28      	it	cs
 80009e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009e8:	d2ed      	bcs.n	80009c6 <__addsf3+0x92>
 80009ea:	fab0 fc80 	clz	ip, r0
 80009ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f2:	ebb2 020c 	subs.w	r2, r2, ip
 80009f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fa:	bfaa      	itet	ge
 80009fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a00:	4252      	neglt	r2, r2
 8000a02:	4318      	orrge	r0, r3
 8000a04:	bfbc      	itt	lt
 8000a06:	40d0      	lsrlt	r0, r2
 8000a08:	4318      	orrlt	r0, r3
 8000a0a:	4770      	bx	lr
 8000a0c:	f092 0f00 	teq	r2, #0
 8000a10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a14:	bf06      	itte	eq
 8000a16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1a:	3201      	addeq	r2, #1
 8000a1c:	3b01      	subne	r3, #1
 8000a1e:	e7b5      	b.n	800098c <__addsf3+0x58>
 8000a20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2e:	d021      	beq.n	8000a74 <__addsf3+0x140>
 8000a30:	ea92 0f03 	teq	r2, r3
 8000a34:	d004      	beq.n	8000a40 <__addsf3+0x10c>
 8000a36:	f092 0f00 	teq	r2, #0
 8000a3a:	bf08      	it	eq
 8000a3c:	4608      	moveq	r0, r1
 8000a3e:	4770      	bx	lr
 8000a40:	ea90 0f01 	teq	r0, r1
 8000a44:	bf1c      	itt	ne
 8000a46:	2000      	movne	r0, #0
 8000a48:	4770      	bxne	lr
 8000a4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a4e:	d104      	bne.n	8000a5a <__addsf3+0x126>
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	bf28      	it	cs
 8000a54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	4770      	bx	lr
 8000a5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a5e:	bf3c      	itt	cc
 8000a60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a64:	4770      	bxcc	lr
 8000a66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a78:	bf16      	itet	ne
 8000a7a:	4608      	movne	r0, r1
 8000a7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a80:	4601      	movne	r1, r0
 8000a82:	0242      	lsls	r2, r0, #9
 8000a84:	bf06      	itte	eq
 8000a86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8a:	ea90 0f01 	teqeq	r0, r1
 8000a8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_ui2f>:
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e004      	b.n	8000aa4 <__aeabi_i2f+0x8>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_i2f>:
 8000a9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa0:	bf48      	it	mi
 8000aa2:	4240      	negmi	r0, r0
 8000aa4:	ea5f 0c00 	movs.w	ip, r0
 8000aa8:	bf08      	it	eq
 8000aaa:	4770      	bxeq	lr
 8000aac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	e01c      	b.n	8000af2 <__aeabi_l2f+0x2a>

08000ab8 <__aeabi_ul2f>:
 8000ab8:	ea50 0201 	orrs.w	r2, r0, r1
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e00a      	b.n	8000adc <__aeabi_l2f+0x14>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_l2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad4:	d502      	bpl.n	8000adc <__aeabi_l2f+0x14>
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000adc:	ea5f 0c01 	movs.w	ip, r1
 8000ae0:	bf02      	ittt	eq
 8000ae2:	4684      	moveq	ip, r0
 8000ae4:	4601      	moveq	r1, r0
 8000ae6:	2000      	moveq	r0, #0
 8000ae8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aec:	bf08      	it	eq
 8000aee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000af6:	fabc f28c 	clz	r2, ip
 8000afa:	3a08      	subs	r2, #8
 8000afc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b00:	db10      	blt.n	8000b24 <__aeabi_l2f+0x5c>
 8000b02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b06:	4463      	add	r3, ip
 8000b08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b0c:	f1c2 0220 	rsb	r2, r2, #32
 8000b10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b14:	fa20 f202 	lsr.w	r2, r0, r2
 8000b18:	eb43 0002 	adc.w	r0, r3, r2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f102 0220 	add.w	r2, r2, #32
 8000b28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2c:	f1c2 0220 	rsb	r2, r2, #32
 8000b30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b34:	fa21 f202 	lsr.w	r2, r1, r2
 8000b38:	eb43 0002 	adc.w	r0, r3, r2
 8000b3c:	bf08      	it	eq
 8000b3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_fmul>:
 8000b44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b52:	ea92 0f0c 	teqne	r2, ip
 8000b56:	ea93 0f0c 	teqne	r3, ip
 8000b5a:	d06f      	beq.n	8000c3c <__aeabi_fmul+0xf8>
 8000b5c:	441a      	add	r2, r3
 8000b5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b62:	0240      	lsls	r0, r0, #9
 8000b64:	bf18      	it	ne
 8000b66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6a:	d01e      	beq.n	8000baa <__aeabi_fmul+0x66>
 8000b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b78:	fba0 3101 	umull	r3, r1, r0, r1
 8000b7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b84:	bf3e      	ittt	cc
 8000b86:	0049      	lslcc	r1, r1, #1
 8000b88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	ea40 0001 	orr.w	r0, r0, r1
 8000b92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b96:	2afd      	cmp	r2, #253	; 0xfd
 8000b98:	d81d      	bhi.n	8000bd6 <__aeabi_fmul+0x92>
 8000b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	4770      	bx	lr
 8000baa:	f090 0f00 	teq	r0, #0
 8000bae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb2:	bf08      	it	eq
 8000bb4:	0249      	lsleq	r1, r1, #9
 8000bb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bbe:	3a7f      	subs	r2, #127	; 0x7f
 8000bc0:	bfc2      	ittt	gt
 8000bc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bca:	4770      	bxgt	lr
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	dc5d      	bgt.n	8000c94 <__aeabi_fmul+0x150>
 8000bd8:	f112 0f19 	cmn.w	r2, #25
 8000bdc:	bfdc      	itt	le
 8000bde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be2:	4770      	bxle	lr
 8000be4:	f1c2 0200 	rsb	r2, r2, #0
 8000be8:	0041      	lsls	r1, r0, #1
 8000bea:	fa21 f102 	lsr.w	r1, r1, r2
 8000bee:	f1c2 0220 	rsb	r2, r2, #32
 8000bf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfa:	f140 0000 	adc.w	r0, r0, #0
 8000bfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c02:	bf08      	it	eq
 8000c04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c08:	4770      	bx	lr
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fmul+0xce>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fmul+0xe6>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e78f      	b.n	8000b5c <__aeabi_fmul+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	bf18      	it	ne
 8000c46:	ea93 0f0c 	teqne	r3, ip
 8000c4a:	d00a      	beq.n	8000c62 <__aeabi_fmul+0x11e>
 8000c4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c50:	bf18      	it	ne
 8000c52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c56:	d1d8      	bne.n	8000c0a <__aeabi_fmul+0xc6>
 8000c58:	ea80 0001 	eor.w	r0, r0, r1
 8000c5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f090 0f00 	teq	r0, #0
 8000c66:	bf17      	itett	ne
 8000c68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	f091 0f00 	teqne	r1, #0
 8000c72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c76:	d014      	beq.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c78:	ea92 0f0c 	teq	r2, ip
 8000c7c:	d101      	bne.n	8000c82 <__aeabi_fmul+0x13e>
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	d10f      	bne.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c82:	ea93 0f0c 	teq	r3, ip
 8000c86:	d103      	bne.n	8000c90 <__aeabi_fmul+0x14c>
 8000c88:	024b      	lsls	r3, r1, #9
 8000c8a:	bf18      	it	ne
 8000c8c:	4608      	movne	r0, r1
 8000c8e:	d108      	bne.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c90:	ea80 0001 	eor.w	r0, r0, r1
 8000c94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bx	lr

08000cac <__aeabi_fdiv>:
 8000cac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cba:	ea92 0f0c 	teqne	r2, ip
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d069      	beq.n	8000d98 <__aeabi_fdiv+0xec>
 8000cc4:	eba2 0203 	sub.w	r2, r2, r3
 8000cc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd2:	d037      	beq.n	8000d44 <__aeabi_fdiv+0x98>
 8000cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cdc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	bf38      	it	cc
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	bf24      	itt	cs
 8000cf6:	1a5b      	subcs	r3, r3, r1
 8000cf8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d0e:	bf24      	itt	cs
 8000d10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d2e:	d1e0      	bne.n	8000cf2 <__aeabi_fdiv+0x46>
 8000d30:	2afd      	cmp	r2, #253	; 0xfd
 8000d32:	f63f af50 	bhi.w	8000bd6 <__aeabi_fmul+0x92>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4c:	327f      	adds	r2, #127	; 0x7f
 8000d4e:	bfc2      	ittt	gt
 8000d50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d58:	4770      	bxgt	lr
 8000d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	3a01      	subs	r2, #1
 8000d64:	e737      	b.n	8000bd6 <__aeabi_fmul+0x92>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fdiv+0xc2>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fdiv+0xda>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e795      	b.n	8000cc4 <__aeabi_fdiv+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d108      	bne.n	8000db4 <__aeabi_fdiv+0x108>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	f47f af7d 	bne.w	8000ca2 <__aeabi_fmul+0x15e>
 8000da8:	ea93 0f0c 	teq	r3, ip
 8000dac:	f47f af70 	bne.w	8000c90 <__aeabi_fmul+0x14c>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e776      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000db4:	ea93 0f0c 	teq	r3, ip
 8000db8:	d104      	bne.n	8000dc4 <__aeabi_fdiv+0x118>
 8000dba:	024b      	lsls	r3, r1, #9
 8000dbc:	f43f af4c 	beq.w	8000c58 <__aeabi_fmul+0x114>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e76e      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000dc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc8:	bf18      	it	ne
 8000dca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dce:	d1ca      	bne.n	8000d66 <__aeabi_fdiv+0xba>
 8000dd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd4:	f47f af5c 	bne.w	8000c90 <__aeabi_fmul+0x14c>
 8000dd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	f47f af3c 	bne.w	8000c58 <__aeabi_fmul+0x114>
 8000de0:	e75f      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000de2:	bf00      	nop

08000de4 <__aeabi_f2iz>:
 8000de4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dec:	d30f      	bcc.n	8000e0e <__aeabi_f2iz+0x2a>
 8000dee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000df2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000df6:	d90d      	bls.n	8000e14 <__aeabi_f2iz+0x30>
 8000df8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e04:	fa23 f002 	lsr.w	r0, r3, r2
 8000e08:	bf18      	it	ne
 8000e0a:	4240      	negne	r0, r0
 8000e0c:	4770      	bx	lr
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	4770      	bx	lr
 8000e14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e18:	d101      	bne.n	8000e1e <__aeabi_f2iz+0x3a>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d105      	bne.n	8000e2a <__aeabi_f2iz+0x46>
 8000e1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e28:	4770      	bx	lr
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_f2uiz>:
 8000e30:	0042      	lsls	r2, r0, #1
 8000e32:	d20e      	bcs.n	8000e52 <__aeabi_f2uiz+0x22>
 8000e34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e38:	d30b      	bcc.n	8000e52 <__aeabi_f2uiz+0x22>
 8000e3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e42:	d409      	bmi.n	8000e58 <__aeabi_f2uiz+0x28>
 8000e44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr
 8000e58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_f2uiz+0x32>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d102      	bne.n	8000e68 <__aeabi_f2uiz+0x38>
 8000e62:	f04f 30ff 	mov.w	r0, #4294967295
 8000e66:	4770      	bx	lr
 8000e68:	f04f 0000 	mov.w	r0, #0
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <uart_receive_init>:
  * @retval touchscreenPacket parsed into specified packet fields
  */

//ST< {"cmd_code":"set_value","type":"label","widget":"label2","value":5} >ET

void uart_receive_init(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
//	uint8_t ReceiveData[20];
	HAL_UART_Receive_DMA(&huart2,Rx_data,15);
 8000e74:	220f      	movs	r2, #15
 8000e76:	4903      	ldr	r1, [pc, #12]	; (8000e84 <uart_receive_init+0x14>)
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <uart_receive_init+0x18>)
 8000e7a:	f006 f9d0 	bl	800721e <HAL_UART_Receive_DMA>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000028 	.word	0x20000028
 8000e88:	200000b4 	.word	0x200000b4

08000e8c <parseTouchIn>:

void parseTouchIn(UART_Packet tsPacket)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	463c      	mov	r4, r7
 8000e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t voaChannel = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]

//	if(tsPacket.LEN[1] == 3)
//	{
		// Update VOA Channel Selection based on TS input
	// Channels 13 - 14 == Select/ Deselect ALL
	if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '3')
 8000e9c:	7a3b      	ldrb	r3, [r7, #8]
 8000e9e:	2b31      	cmp	r3, #49	; 0x31
 8000ea0:	d105      	bne.n	8000eae <parseTouchIn+0x22>
 8000ea2:	7a7b      	ldrb	r3, [r7, #9]
 8000ea4:	2b33      	cmp	r3, #51	; 0x33
 8000ea6:	d102      	bne.n	8000eae <parseTouchIn+0x22>
	{
		voaChannel = 13;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	e061      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '4')
 8000eae:	7a3b      	ldrb	r3, [r7, #8]
 8000eb0:	2b31      	cmp	r3, #49	; 0x31
 8000eb2:	d105      	bne.n	8000ec0 <parseTouchIn+0x34>
 8000eb4:	7a7b      	ldrb	r3, [r7, #9]
 8000eb6:	2b34      	cmp	r3, #52	; 0x34
 8000eb8:	d102      	bne.n	8000ec0 <parseTouchIn+0x34>
	{
		voaChannel = 14;
 8000eba:	230e      	movs	r3, #14
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	e058      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '5')
 8000ec0:	7a3b      	ldrb	r3, [r7, #8]
 8000ec2:	2b31      	cmp	r3, #49	; 0x31
 8000ec4:	d105      	bne.n	8000ed2 <parseTouchIn+0x46>
 8000ec6:	7a7b      	ldrb	r3, [r7, #9]
 8000ec8:	2b35      	cmp	r3, #53	; 0x35
 8000eca:	d102      	bne.n	8000ed2 <parseTouchIn+0x46>
	{
		voaChannel = 15; //back button after aardvark comm
 8000ecc:	230f      	movs	r3, #15
 8000ece:	75fb      	strb	r3, [r7, #23]
 8000ed0:	e04f      	b.n	8000f72 <parseTouchIn+0xe6>
	}

	// Channels 10 - 12
	else if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '0')
 8000ed2:	7a3b      	ldrb	r3, [r7, #8]
 8000ed4:	2b31      	cmp	r3, #49	; 0x31
 8000ed6:	d105      	bne.n	8000ee4 <parseTouchIn+0x58>
 8000ed8:	7a7b      	ldrb	r3, [r7, #9]
 8000eda:	2b30      	cmp	r3, #48	; 0x30
 8000edc:	d102      	bne.n	8000ee4 <parseTouchIn+0x58>
	{
		voaChannel = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	75fb      	strb	r3, [r7, #23]
 8000ee2:	e046      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '1')
 8000ee4:	7a3b      	ldrb	r3, [r7, #8]
 8000ee6:	2b31      	cmp	r3, #49	; 0x31
 8000ee8:	d105      	bne.n	8000ef6 <parseTouchIn+0x6a>
 8000eea:	7a7b      	ldrb	r3, [r7, #9]
 8000eec:	2b31      	cmp	r3, #49	; 0x31
 8000eee:	d102      	bne.n	8000ef6 <parseTouchIn+0x6a>
	{
		voaChannel = 11;
 8000ef0:	230b      	movs	r3, #11
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	e03d      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '1' && tsPacket.Data[2]== '2')
 8000ef6:	7a3b      	ldrb	r3, [r7, #8]
 8000ef8:	2b31      	cmp	r3, #49	; 0x31
 8000efa:	d105      	bne.n	8000f08 <parseTouchIn+0x7c>
 8000efc:	7a7b      	ldrb	r3, [r7, #9]
 8000efe:	2b32      	cmp	r3, #50	; 0x32
 8000f00:	d102      	bne.n	8000f08 <parseTouchIn+0x7c>
	{
		voaChannel = 12;
 8000f02:	230c      	movs	r3, #12
 8000f04:	75fb      	strb	r3, [r7, #23]
 8000f06:	e034      	b.n	8000f72 <parseTouchIn+0xe6>
	}


	// Channels 1 - 9
	else if(tsPacket.Data[1]== '1')
 8000f08:	7a3b      	ldrb	r3, [r7, #8]
 8000f0a:	2b31      	cmp	r3, #49	; 0x31
 8000f0c:	d102      	bne.n	8000f14 <parseTouchIn+0x88>
	{
		voaChannel = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
 8000f12:	e02e      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '2')
 8000f14:	7a3b      	ldrb	r3, [r7, #8]
 8000f16:	2b32      	cmp	r3, #50	; 0x32
 8000f18:	d102      	bne.n	8000f20 <parseTouchIn+0x94>
	{
		voaChannel = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	75fb      	strb	r3, [r7, #23]
 8000f1e:	e028      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '3')
 8000f20:	7a3b      	ldrb	r3, [r7, #8]
 8000f22:	2b33      	cmp	r3, #51	; 0x33
 8000f24:	d102      	bne.n	8000f2c <parseTouchIn+0xa0>
	{
		voaChannel = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	75fb      	strb	r3, [r7, #23]
 8000f2a:	e022      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '4')
 8000f2c:	7a3b      	ldrb	r3, [r7, #8]
 8000f2e:	2b34      	cmp	r3, #52	; 0x34
 8000f30:	d102      	bne.n	8000f38 <parseTouchIn+0xac>
	{
		voaChannel = 4;
 8000f32:	2304      	movs	r3, #4
 8000f34:	75fb      	strb	r3, [r7, #23]
 8000f36:	e01c      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '5')
 8000f38:	7a3b      	ldrb	r3, [r7, #8]
 8000f3a:	2b35      	cmp	r3, #53	; 0x35
 8000f3c:	d102      	bne.n	8000f44 <parseTouchIn+0xb8>
	{
		voaChannel = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	75fb      	strb	r3, [r7, #23]
 8000f42:	e016      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '6')
 8000f44:	7a3b      	ldrb	r3, [r7, #8]
 8000f46:	2b36      	cmp	r3, #54	; 0x36
 8000f48:	d102      	bne.n	8000f50 <parseTouchIn+0xc4>
	{
		voaChannel = 6;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e010      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '7')
 8000f50:	7a3b      	ldrb	r3, [r7, #8]
 8000f52:	2b37      	cmp	r3, #55	; 0x37
 8000f54:	d102      	bne.n	8000f5c <parseTouchIn+0xd0>
	{
		voaChannel = 7;
 8000f56:	2307      	movs	r3, #7
 8000f58:	75fb      	strb	r3, [r7, #23]
 8000f5a:	e00a      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '8')
 8000f5c:	7a3b      	ldrb	r3, [r7, #8]
 8000f5e:	2b38      	cmp	r3, #56	; 0x38
 8000f60:	d102      	bne.n	8000f68 <parseTouchIn+0xdc>
	{
		voaChannel = 8;
 8000f62:	2308      	movs	r3, #8
 8000f64:	75fb      	strb	r3, [r7, #23]
 8000f66:	e004      	b.n	8000f72 <parseTouchIn+0xe6>
	}
	else if(tsPacket.Data[1]== '9')
 8000f68:	7a3b      	ldrb	r3, [r7, #8]
 8000f6a:	2b39      	cmp	r3, #57	; 0x39
 8000f6c:	d101      	bne.n	8000f72 <parseTouchIn+0xe6>
	{
		voaChannel = 9;
 8000f6e:	2309      	movs	r3, #9
 8000f70:	75fb      	strb	r3, [r7, #23]
//	}
//	else if(tsPacket.LEN[1] == 4)
//	{
	// Update VOA Channel Selection based on TS input
//	}
	if((voaChannel < 15)&&(voaChannel != 0))
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b0e      	cmp	r3, #14
 8000f76:	d807      	bhi.n	8000f88 <parseTouchIn+0xfc>
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <parseTouchIn+0xfc>
	{
		addChannel(voaChannel); // add channel to VOA list
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f8cb 	bl	800111c <addChannel>
	}
	else if(voaChannel < 15)
	{
		unlockDevice();
	}
}
 8000f86:	e004      	b.n	8000f92 <parseTouchIn+0x106>
	else if(voaChannel < 15)
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b0e      	cmp	r3, #14
 8000f8c:	d801      	bhi.n	8000f92 <parseTouchIn+0x106>
		unlockDevice();
 8000f8e:	f001 f921 	bl	80021d4 <unlockDevice>
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
	...

08000f9c <getVOA>:

uint16_t getVOA(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	uint16_t returnVOA = 0b0000000000000000;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 12; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	e085      	b.n	80010b8 <getVOA+0x11c>
	{
		// Set bit index of VOA selection and return binary value
		if(voaSelect[i] == 1) returnVOA |= 0b0000000000000001;
 8000fac:	4a47      	ldr	r2, [pc, #284]	; (80010cc <getVOA+0x130>)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d104      	bne.n	8000fc2 <getVOA+0x26>
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	e077      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 2) returnVOA |= 0b0000000000000010;
 8000fc2:	4a42      	ldr	r2, [pc, #264]	; (80010cc <getVOA+0x130>)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d104      	bne.n	8000fd8 <getVOA+0x3c>
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	80fb      	strh	r3, [r7, #6]
 8000fd6:	e06c      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 3) returnVOA |= 0b0000000000000100;
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <getVOA+0x130>)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d104      	bne.n	8000fee <getVOA+0x52>
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	e061      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 4) returnVOA |= 0b0000000000001000;
 8000fee:	4a37      	ldr	r2, [pc, #220]	; (80010cc <getVOA+0x130>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d104      	bne.n	8001004 <getVOA+0x68>
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	e056      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 5) returnVOA |= 0b0000000000010000;
 8001004:	4a31      	ldr	r2, [pc, #196]	; (80010cc <getVOA+0x130>)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d104      	bne.n	800101a <getVOA+0x7e>
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	e04b      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 6) returnVOA |= 0b0000000000100000;
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <getVOA+0x130>)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b06      	cmp	r3, #6
 8001024:	d104      	bne.n	8001030 <getVOA+0x94>
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	e040      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 7) returnVOA |= 0b0000000001000000;
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <getVOA+0x130>)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b07      	cmp	r3, #7
 800103a:	d104      	bne.n	8001046 <getVOA+0xaa>
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	80fb      	strh	r3, [r7, #6]
 8001044:	e035      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 8) returnVOA |= 0b0000000010000000;
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <getVOA+0x130>)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b08      	cmp	r3, #8
 8001050:	d104      	bne.n	800105c <getVOA+0xc0>
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	e02a      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 9) returnVOA |= 0b0000000100000000;
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <getVOA+0x130>)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b09      	cmp	r3, #9
 8001066:	d104      	bne.n	8001072 <getVOA+0xd6>
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	e01f      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 10) returnVOA |= 0b000001000000000;
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <getVOA+0x130>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d104      	bne.n	8001088 <getVOA+0xec>
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	e014      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 11) returnVOA |= 0b000010000000000;
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <getVOA+0x130>)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b0b      	cmp	r3, #11
 8001092:	d104      	bne.n	800109e <getVOA+0x102>
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	e009      	b.n	80010b2 <getVOA+0x116>
		else if(voaSelect[i] == 12) returnVOA |= 0b000100000000000;
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <getVOA+0x130>)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d103      	bne.n	80010b2 <getVOA+0x116>
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 12; i++)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b0b      	cmp	r3, #11
 80010bc:	f77f af76 	ble.w	8000fac <getVOA+0x10>
		else returnVOA |= 0b0000000000000000;
	}
	return returnVOA;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	200000a4 	.word	0x200000a4

080010d0 <isIn>:

uint8_t isIn(uint8_t voaNum)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 12; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e011      	b.n	8001104 <isIn+0x34>
	{
		if(voaSelect[i] == voaNum && voaNum != 13 && voaNum != 14) return 1;
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <isIn+0x48>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d107      	bne.n	80010fe <isIn+0x2e>
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b0d      	cmp	r3, #13
 80010f2:	d004      	beq.n	80010fe <isIn+0x2e>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b0e      	cmp	r3, #14
 80010f8:	d001      	beq.n	80010fe <isIn+0x2e>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e006      	b.n	800110c <isIn+0x3c>
	for(int i = 0; i < 12; i++)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b0b      	cmp	r3, #11
 8001108:	ddea      	ble.n	80010e0 <isIn+0x10>
	}
	return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000a4 	.word	0x200000a4

0800111c <addChannel>:

void addChannel(uint8_t voaCH)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if(voaCH == 13) // SELECT ALL
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b0d      	cmp	r3, #13
 800112a:	d123      	bne.n	8001174 <addChannel+0x58>
	{
		// Clear Array
		for(int i = 0; i < 12; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e007      	b.n	8001142 <addChannel+0x26>
		{
			voaSelect[i] = 0;
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <addChannel+0xd4>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4413      	add	r3, r2
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 12; i++)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b0b      	cmp	r3, #11
 8001146:	ddf4      	ble.n	8001132 <addChannel+0x16>
		}
		// Set ALL VOAs
		for(int i = 0; i < 12; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e00b      	b.n	8001166 <addChannel+0x4a>
		{
			voaSelect[i] = (uint8_t)i+1;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	3301      	adds	r3, #1
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <addChannel+0xd4>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 12; i++)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	3301      	adds	r3, #1
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b0b      	cmp	r3, #11
 800116a:	ddf0      	ble.n	800114e <addChannel+0x32>
		}
		voaIndex = 13;
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <addChannel+0xd8>)
 800116e:	220d      	movs	r2, #13
 8001170:	701a      	strb	r2, [r3, #0]
		}
		voaSelected = voaCH;
		add_scheduled_event(TOUCHSCREEN_SELECT_CB);
		//select VOA call
	}
}
 8001172:	e038      	b.n	80011e6 <addChannel+0xca>
	else if(voaCH == 14) // DE SELECT ALL
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b0e      	cmp	r3, #14
 8001178:	d111      	bne.n	800119e <addChannel+0x82>
		for(int i = 0; i < 12; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	e007      	b.n	8001190 <addChannel+0x74>
			voaSelect[i] = 0;
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <addChannel+0xd4>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 12; i++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b0b      	cmp	r3, #11
 8001194:	ddf4      	ble.n	8001180 <addChannel+0x64>
		voaIndex = 0;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <addChannel+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	e023      	b.n	80011e6 <addChannel+0xca>
		if(isIn(voaCH))
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff95 	bl	80010d0 <isIn>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <addChannel+0xa0>
			highlight = 0;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <addChannel+0xdc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			removeVOA(voaCH);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f823 	bl	8001200 <removeVOA>
 80011ba:	e00e      	b.n	80011da <addChannel+0xbe>
			highlight = 1;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <addChannel+0xdc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
			voaSelect[voaIndex] = voaCH; // Add channel to global voaSelect Array
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <addChannel+0xd8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <addChannel+0xd4>)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	5453      	strb	r3, [r2, r1]
			voaIndex++;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <addChannel+0xd8>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <addChannel+0xd8>)
 80011d8:	701a      	strb	r2, [r3, #0]
		voaSelected = voaCH;
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <addChannel+0xe0>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	7013      	strb	r3, [r2, #0]
		add_scheduled_event(TOUCHSCREEN_SELECT_CB);
 80011e0:	2040      	movs	r0, #64	; 0x40
 80011e2:	f001 fd47 	bl	8002c74 <add_scheduled_event>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000a4 	.word	0x200000a4
 80011f4:	200000a0 	.word	0x200000a0
 80011f8:	200000b3 	.word	0x200000b3
 80011fc:	200000b2 	.word	0x200000b2

08001200 <removeVOA>:

void removeVOA(uint8_t voa)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    uint8_t crawler = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
    while(voaSelect[crawler] != voa) crawler++;
 800120e:	e002      	b.n	8001216 <removeVOA+0x16>
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <removeVOA+0x54>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	429a      	cmp	r2, r3
 8001220:	d1f6      	bne.n	8001210 <removeVOA+0x10>
    while(crawler != 12)
 8001222:	e009      	b.n	8001238 <removeVOA+0x38>
    {
        voaSelect[crawler] = voaSelect[crawler + 1];
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <removeVOA+0x54>)
 800122c:	5c89      	ldrb	r1, [r1, r2]
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <removeVOA+0x54>)
 8001230:	54d1      	strb	r1, [r2, r3]
        crawler++;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	3301      	adds	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
    while(crawler != 12)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d1f2      	bne.n	8001224 <removeVOA+0x24>
    }
    voaIndex = voaIndex - 1;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <removeVOA+0x58>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <removeVOA+0x58>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	200000a4 	.word	0x200000a4
 8001258:	200000a0 	.word	0x200000a0

0800125c <clearVOA>:


// Clears VOA buffer as well as resets index
void clearVOA(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
	for(int i =0; i < 12; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e007      	b.n	8001278 <clearVOA+0x1c>
	{
		voaSelect[i] = 0;
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <clearVOA+0x34>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 12; i++)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b0b      	cmp	r3, #11
 800127c:	ddf4      	ble.n	8001268 <clearVOA+0xc>
	}
	voaIndex = 0;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <clearVOA+0x38>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200000a4 	.word	0x200000a4
 8001294:	200000a0 	.word	0x200000a0

08001298 <clearRxData>:

void clearRxData(void){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 20; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e007      	b.n	80012b4 <clearRxData+0x1c>
	{
		Rx_data[i] = 0;
 80012a4:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <clearRxData+0x30>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 20; i++)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	ddf4      	ble.n	80012a4 <clearRxData+0xc>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000028 	.word	0x20000028

080012cc <clearTxData>:

void clearTxData(void){
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	e007      	b.n	80012e8 <clearTxData+0x1c>
	{
		TxData[i] = 0;
 80012d8:	4a08      	ldr	r2, [pc, #32]	; (80012fc <clearTxData+0x30>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b63      	cmp	r3, #99	; 0x63
 80012ec:	ddf4      	ble.n	80012d8 <clearTxData+0xc>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000003c 	.word	0x2000003c

08001300 <parseUART>:

UART_Packet parseUART(void)
{
 8001300:	b4b0      	push	{r4, r5, r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	volatile UART_Packet touchscreenPacket;
	int crawler = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
	while(Rx_data[crawler] != 'v')
 800130c:	e005      	b.n	800131a <parseUART+0x1a>
	{
		crawler++; // find Data frame
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
		if(crawler > 15) return;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	dc2c      	bgt.n	8001374 <parseUART+0x74>
	while(Rx_data[crawler] != 'v')
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <parseUART+0x84>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b76      	cmp	r3, #118	; 0x76
 8001324:	d1f3      	bne.n	800130e <parseUART+0xe>
	}
	touchscreenPacket.Data[0] = Rx_data[crawler]; // V
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <parseUART+0x84>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	74fb      	strb	r3, [r7, #19]
	crawler++;
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
	touchscreenPacket.Data[1] = Rx_data[crawler]; // 1- 9
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <parseUART+0x84>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	753b      	strb	r3, [r7, #20]
	crawler++;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3301      	adds	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
	touchscreenPacket.Data[2] = Rx_data[crawler]; // 1- 3
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <parseUART+0x84>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	757b      	strb	r3, [r7, #21]
	crawler++;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
	touchscreenPacket.Data[3] = Rx_data[crawler]; // Button State
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <parseUART+0x84>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	75bb      	strb	r3, [r7, #22]
//	for(int i = NextIndex + 5; i <= NextIndex + 7; i++)
//	{
//		touchscreenPacket.Verification[index] = ReceiveData[i];
//		index++;
//	}
	return touchscreenPacket;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	461d      	mov	r5, r3
 8001364:	f107 040c 	add.w	r4, r7, #12
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	6028      	str	r0, [r5, #0]
 800136c:	6069      	str	r1, [r5, #4]
 800136e:	60aa      	str	r2, [r5, #8]
 8001370:	60eb      	str	r3, [r5, #12]
 8001372:	e001      	b.n	8001378 <parseUART+0x78>
		if(crawler > 15) return;
 8001374:	bf00      	nop
 8001376:	bf00      	nop
}
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	bcb0      	pop	{r4, r5, r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000028 	.word	0x20000028

08001388 <UART_init>:

void UART_init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

	MX_DMA_Init();
 800138c:	f000 f832 	bl	80013f4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001390:	f000 f806 	bl	80013a0 <MX_USART2_UART_Init>
	clearVOA();
 8001394:	f7ff ff62 	bl	800125c <clearVOA>
	deselectVOA();
 8001398:	f000 fc7c 	bl	8001c94 <deselectVOA>
//	__HAL_UART_CLEAR_OREFLAG(&huart2);
//	__HAL_UART_CLEAR_NEFLAG(&huart2);
//	__HAL_UART_CLEAR_FEFLAG(&huart2);
//	__HAL_UART_DISABLE_IT(&huart2, UART_IT_ERR);

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f005 fe42 	bl	8007060 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f001 f8c3 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000b4 	.word	0x200000b4
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_DMA_Init+0x38>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <MX_DMA_Init+0x38>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_DMA_Init+0x38>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2010      	movs	r0, #16
 8001418:	f002 f8b3 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800141c:	2010      	movs	r0, #16
 800141e:	f002 f8cc 	bl	80035ba <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if(huart2->Instance == USART2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_UART_RxCpltCallback+0x2c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d108      	bne.n	8001454 <HAL_UART_RxCpltCallback+0x24>
	{
		HAL_UART_Receive_DMA(&huart2,Rx_data, 15);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	220f      	movs	r2, #15
 8001446:	4906      	ldr	r1, [pc, #24]	; (8001460 <HAL_UART_RxCpltCallback+0x30>)
 8001448:	4618      	mov	r0, r3
 800144a:	f005 fee8 	bl	800721e <HAL_UART_Receive_DMA>
		add_scheduled_event(TOUCHSCREEN_RECEIVE_CB);
 800144e:	2002      	movs	r0, #2
 8001450:	f001 fc10 	bl	8002c74 <add_scheduled_event>
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40004400 	.word	0x40004400
 8001460:	20000028 	.word	0x20000028

08001464 <touchscreen_update>:
  * @param widget; Specified Widget to update
  * @param value; Value to display, can be an empty array (ex: no value)
  *
  * @retval None
  */
void touchscreen_update(uint8_t *cmdCode,uint8_t *type,uint8_t *widgit, uint8_t* value, uint8_t valueArrSize, uint8_t toggleText){
 8001464:	b580      	push	{r7, lr}
 8001466:	b098      	sub	sp, #96	; 0x60
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
	// Frame Header


		uint8_t cmdW[] = {0x63, 0x6D, 0x64, 0x5F, 0x63, 0x6F, 0x64, 0x65, 0x22};
 8001472:	4aa3      	ldr	r2, [pc, #652]	; (8001700 <touchscreen_update+0x29c>)
 8001474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001478:	ca07      	ldmia	r2, {r0, r1, r2}
 800147a:	c303      	stmia	r3!, {r0, r1}
 800147c:	701a      	strb	r2, [r3, #0]
		// 5C 22 63 6D 64 5F 63 6F 64 65 5C 22
		uint8_t typeW[] = {0x22, 0x74, 0x79, 0x70, 0x65, 0x22};
 800147e:	4aa1      	ldr	r2, [pc, #644]	; (8001704 <touchscreen_update+0x2a0>)
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001488:	6018      	str	r0, [r3, #0]
 800148a:	3304      	adds	r3, #4
 800148c:	8019      	strh	r1, [r3, #0]
//		5C 22 74 79 70 65 5C 22
		uint8_t widgetW[] = {0x22, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,0x22};
 800148e:	4a9e      	ldr	r2, [pc, #632]	; (8001708 <touchscreen_update+0x2a4>)
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001498:	e883 0003 	stmia.w	r3, {r0, r1}
//		5C 22 77 69 64 67 65 74 5C 22
		uint8_t textW[] = {0x22, 0x74, 0x65, 0x78, 0x74,0x22}; // "text"
 800149c:	4a9b      	ldr	r2, [pc, #620]	; (800170c <touchscreen_update+0x2a8>)
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a6:	6018      	str	r0, [r3, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	8019      	strh	r1, [r3, #0]
		uint8_t valueW[] = {0x22, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x22}; //"value"
 80014ac:	4a98      	ldr	r2, [pc, #608]	; (8001710 <touchscreen_update+0x2ac>)
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b6:	6018      	str	r0, [r3, #0]
 80014b8:	3304      	adds	r3, #4
 80014ba:	8019      	strh	r1, [r3, #0]
 80014bc:	3302      	adds	r3, #2
 80014be:	0c0a      	lsrs	r2, r1, #16
 80014c0:	701a      	strb	r2, [r3, #0]
//		typeW[] = " \"type\" ";
//		widgetW[] = " \"widget\" ";
//		valueW[] = " \"value\" ";

		// Frame Header
		TxData[0] = 0x53;  // S
 80014c2:	4b94      	ldr	r3, [pc, #592]	; (8001714 <touchscreen_update+0x2b0>)
 80014c4:	2253      	movs	r2, #83	; 0x53
 80014c6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x54;  // T
 80014c8:	4b92      	ldr	r3, [pc, #584]	; (8001714 <touchscreen_update+0x2b0>)
 80014ca:	2254      	movs	r2, #84	; 0x54
 80014cc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x3C;  // <
 80014ce:	4b91      	ldr	r3, [pc, #580]	; (8001714 <touchscreen_update+0x2b0>)
 80014d0:	223c      	movs	r2, #60	; 0x3c
 80014d2:	709a      	strb	r2, [r3, #2]

		//Bracket
		TxData[3] = 0x7B; // {
 80014d4:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <touchscreen_update+0x2b0>)
 80014d6:	227b      	movs	r2, #123	; 0x7b
 80014d8:	70da      	strb	r2, [r3, #3]

		// CMD Code JSON
		int index = 4;
 80014da:	2304      	movs	r3, #4
 80014dc:	65fb      	str	r3, [r7, #92]	; 0x5c
		uint8_t j = sizeof(cmdW)/sizeof(uint8_t);
 80014de:	2309      	movs	r3, #9
 80014e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		TxData[index] = 0x22; // "
 80014e4:	4a8b      	ldr	r2, [pc, #556]	; (8001714 <touchscreen_update+0x2b0>)
 80014e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e8:	4413      	add	r3, r2
 80014ea:	2222      	movs	r2, #34	; 0x22
 80014ec:	701a      	strb	r2, [r3, #0]
		index++;
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	3301      	adds	r3, #1
 80014f2:	65fb      	str	r3, [r7, #92]	; 0x5c
		for(int i = 0; i < j; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80014f8:	e00f      	b.n	800151a <touchscreen_update+0xb6>
		{
			TxData[index] = cmdW[i];
 80014fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	4413      	add	r3, r2
 8001502:	7819      	ldrb	r1, [r3, #0]
 8001504:	4a83      	ldr	r2, [pc, #524]	; (8001714 <touchscreen_update+0x2b0>)
 8001506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001508:	4413      	add	r3, r2
 800150a:	460a      	mov	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
			index++;
 800150e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001510:	3301      	adds	r3, #1
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
		for(int i = 0; i < j; i++)
 8001514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001516:	3301      	adds	r3, #1
 8001518:	65bb      	str	r3, [r7, #88]	; 0x58
 800151a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800151e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001520:	429a      	cmp	r2, r3
 8001522:	dbea      	blt.n	80014fa <touchscreen_update+0x96>
		}
		TxData[index] =  0x3A; // :
 8001524:	4a7b      	ldr	r2, [pc, #492]	; (8001714 <touchscreen_update+0x2b0>)
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	4413      	add	r3, r2
 800152a:	223a      	movs	r2, #58	; 0x3a
 800152c:	701a      	strb	r2, [r3, #0]
		index++;
 800152e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001530:	3301      	adds	r3, #1
 8001532:	65fb      	str	r3, [r7, #92]	; 0x5c

		// CMD Code Input
		int iterator = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
		TxData[index] = 0x22; // "
 8001538:	4a76      	ldr	r2, [pc, #472]	; (8001714 <touchscreen_update+0x2b0>)
 800153a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153c:	4413      	add	r3, r2
 800153e:	2222      	movs	r2, #34	; 0x22
 8001540:	701a      	strb	r2, [r3, #0]
		index++;
 8001542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001544:	3301      	adds	r3, #1
 8001546:	65fb      	str	r3, [r7, #92]	; 0x5c
		while(cmdCode[iterator] != 0x22)
 8001548:	e00e      	b.n	8001568 <touchscreen_update+0x104>
		{
			TxData[index] = cmdCode[iterator];
 800154a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	7819      	ldrb	r1, [r3, #0]
 8001552:	4a70      	ldr	r2, [pc, #448]	; (8001714 <touchscreen_update+0x2b0>)
 8001554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001556:	4413      	add	r3, r2
 8001558:	460a      	mov	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
			index++;
 800155c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800155e:	3301      	adds	r3, #1
 8001560:	65fb      	str	r3, [r7, #92]	; 0x5c
			iterator++;
 8001562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001564:	3301      	adds	r3, #1
 8001566:	657b      	str	r3, [r7, #84]	; 0x54
		while(cmdCode[iterator] != 0x22)
 8001568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b22      	cmp	r3, #34	; 0x22
 8001572:	d1ea      	bne.n	800154a <touchscreen_update+0xe6>
		}
		TxData[index] = 0x22; // "
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <touchscreen_update+0x2b0>)
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	4413      	add	r3, r2
 800157a:	2222      	movs	r2, #34	; 0x22
 800157c:	701a      	strb	r2, [r3, #0]
		index++;
 800157e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001580:	3301      	adds	r3, #1
 8001582:	65fb      	str	r3, [r7, #92]	; 0x5c

		TxData[index] =  0x2C; // ,
 8001584:	4a63      	ldr	r2, [pc, #396]	; (8001714 <touchscreen_update+0x2b0>)
 8001586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001588:	4413      	add	r3, r2
 800158a:	222c      	movs	r2, #44	; 0x2c
 800158c:	701a      	strb	r2, [r3, #0]
		index++;
 800158e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001590:	3301      	adds	r3, #1
 8001592:	65fb      	str	r3, [r7, #92]	; 0x5c


		// Type JSON
		j = sizeof(typeW)/sizeof(uint8_t);
 8001594:	2306      	movs	r3, #6
 8001596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for(int i = 0; i < j; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	653b      	str	r3, [r7, #80]	; 0x50
 800159e:	e00f      	b.n	80015c0 <touchscreen_update+0x15c>
		{
			TxData[index] = typeW[i];
 80015a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80015a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015a6:	4413      	add	r3, r2
 80015a8:	7819      	ldrb	r1, [r3, #0]
 80015aa:	4a5a      	ldr	r2, [pc, #360]	; (8001714 <touchscreen_update+0x2b0>)
 80015ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ae:	4413      	add	r3, r2
 80015b0:	460a      	mov	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
			index++;
 80015b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b6:	3301      	adds	r3, #1
 80015b8:	65fb      	str	r3, [r7, #92]	; 0x5c
		for(int i = 0; i < j; i++)
 80015ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015bc:	3301      	adds	r3, #1
 80015be:	653b      	str	r3, [r7, #80]	; 0x50
 80015c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbea      	blt.n	80015a0 <touchscreen_update+0x13c>
		}
		TxData[index] =  0x3A; // :
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <touchscreen_update+0x2b0>)
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	4413      	add	r3, r2
 80015d0:	223a      	movs	r2, #58	; 0x3a
 80015d2:	701a      	strb	r2, [r3, #0]
		index++;
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	3301      	adds	r3, #1
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c

		// Type Input
		iterator = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	657b      	str	r3, [r7, #84]	; 0x54
		TxData[index] = 0x22; // "
 80015de:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <touchscreen_update+0x2b0>)
 80015e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e2:	4413      	add	r3, r2
 80015e4:	2222      	movs	r2, #34	; 0x22
 80015e6:	701a      	strb	r2, [r3, #0]
		index++;
 80015e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ea:	3301      	adds	r3, #1
 80015ec:	65fb      	str	r3, [r7, #92]	; 0x5c
		while(type[iterator] != 0x22)
 80015ee:	e00e      	b.n	800160e <touchscreen_update+0x1aa>
		{
			TxData[index] = type[iterator];
 80015f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	4413      	add	r3, r2
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <touchscreen_update+0x2b0>)
 80015fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
			index++;
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	3301      	adds	r3, #1
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
			iterator++;
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	3301      	adds	r3, #1
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
		while(type[iterator] != 0x22)
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b22      	cmp	r3, #34	; 0x22
 8001618:	d1ea      	bne.n	80015f0 <touchscreen_update+0x18c>
		}
		TxData[index] = 0x22; // "
 800161a:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <touchscreen_update+0x2b0>)
 800161c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161e:	4413      	add	r3, r2
 8001620:	2222      	movs	r2, #34	; 0x22
 8001622:	701a      	strb	r2, [r3, #0]
		index++;
 8001624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001626:	3301      	adds	r3, #1
 8001628:	65fb      	str	r3, [r7, #92]	; 0x5c

		TxData[index] =  0x2C; // ,
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <touchscreen_update+0x2b0>)
 800162c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162e:	4413      	add	r3, r2
 8001630:	222c      	movs	r2, #44	; 0x2c
 8001632:	701a      	strb	r2, [r3, #0]
		index++;
 8001634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001636:	3301      	adds	r3, #1
 8001638:	65fb      	str	r3, [r7, #92]	; 0x5c

		// Widgit JSON
		j = sizeof(widgetW)/sizeof(uint8_t);
 800163a:	2308      	movs	r3, #8
 800163c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for(int i = 0; i < j; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001644:	e00f      	b.n	8001666 <touchscreen_update+0x202>
		{
			TxData[index] = widgetW[i];
 8001646:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800164a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800164c:	4413      	add	r3, r2
 800164e:	7819      	ldrb	r1, [r3, #0]
 8001650:	4a30      	ldr	r2, [pc, #192]	; (8001714 <touchscreen_update+0x2b0>)
 8001652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
			index++;
 800165a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165c:	3301      	adds	r3, #1
 800165e:	65fb      	str	r3, [r7, #92]	; 0x5c
		for(int i = 0; i < j; i++)
 8001660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001662:	3301      	adds	r3, #1
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800166a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800166c:	429a      	cmp	r2, r3
 800166e:	dbea      	blt.n	8001646 <touchscreen_update+0x1e2>
		}
		TxData[index] =  0x3A; // :
 8001670:	4a28      	ldr	r2, [pc, #160]	; (8001714 <touchscreen_update+0x2b0>)
 8001672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001674:	4413      	add	r3, r2
 8001676:	223a      	movs	r2, #58	; 0x3a
 8001678:	701a      	strb	r2, [r3, #0]
		index++;
 800167a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167c:	3301      	adds	r3, #1
 800167e:	65fb      	str	r3, [r7, #92]	; 0x5c

		// Widgit Input
		iterator = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
		TxData[index] = 0x22; // "
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <touchscreen_update+0x2b0>)
 8001686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001688:	4413      	add	r3, r2
 800168a:	2222      	movs	r2, #34	; 0x22
 800168c:	701a      	strb	r2, [r3, #0]
		index++;
 800168e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001690:	3301      	adds	r3, #1
 8001692:	65fb      	str	r3, [r7, #92]	; 0x5c

		while(widgit[iterator] != 0x22)
 8001694:	e00e      	b.n	80016b4 <touchscreen_update+0x250>
		{
			TxData[index] = widgit[iterator];
 8001696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	7819      	ldrb	r1, [r3, #0]
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <touchscreen_update+0x2b0>)
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	4413      	add	r3, r2
 80016a4:	460a      	mov	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
			index++;
 80016a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016aa:	3301      	adds	r3, #1
 80016ac:	65fb      	str	r3, [r7, #92]	; 0x5c
			iterator++;
 80016ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b0:	3301      	adds	r3, #1
 80016b2:	657b      	str	r3, [r7, #84]	; 0x54
		while(widgit[iterator] != 0x22)
 80016b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b22      	cmp	r3, #34	; 0x22
 80016be:	d1ea      	bne.n	8001696 <touchscreen_update+0x232>
		}
		TxData[index] = 0x22; // "
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <touchscreen_update+0x2b0>)
 80016c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c4:	4413      	add	r3, r2
 80016c6:	2222      	movs	r2, #34	; 0x22
 80016c8:	701a      	strb	r2, [r3, #0]
		index++;
 80016ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016cc:	3301      	adds	r3, #1
 80016ce:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(valueArrSize != 0)
 80016d0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 809b 	beq.w	8001810 <touchscreen_update+0x3ac>
		{
			TxData[index] =  0x2C; // ,
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <touchscreen_update+0x2b0>)
 80016dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016de:	4413      	add	r3, r2
 80016e0:	222c      	movs	r2, #44	; 0x2c
 80016e2:	701a      	strb	r2, [r3, #0]
			index++;
 80016e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e6:	3301      	adds	r3, #1
 80016e8:	65fb      	str	r3, [r7, #92]	; 0x5c

			// Value JSON
			if(!toggleText)
 80016ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d138      	bne.n	8001764 <touchscreen_update+0x300>
			{
				j = sizeof(textW)/sizeof(uint8_t);
 80016f2:	2306      	movs	r3, #6
 80016f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				for(int i = 0; i < j;i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80016fc:	e01c      	b.n	8001738 <touchscreen_update+0x2d4>
 80016fe:	bf00      	nop
 8001700:	08007d34 	.word	0x08007d34
 8001704:	08007d40 	.word	0x08007d40
 8001708:	08007d48 	.word	0x08007d48
 800170c:	08007d50 	.word	0x08007d50
 8001710:	08007d58 	.word	0x08007d58
 8001714:	2000003c 	.word	0x2000003c
				{
					TxData[index] =  textW[i];
 8001718:	f107 021c 	add.w	r2, r7, #28
 800171c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800171e:	4413      	add	r3, r2
 8001720:	7819      	ldrb	r1, [r3, #0]
 8001722:	4a52      	ldr	r2, [pc, #328]	; (800186c <touchscreen_update+0x408>)
 8001724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001726:	4413      	add	r3, r2
 8001728:	460a      	mov	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
					index++;
 800172c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172e:	3301      	adds	r3, #1
 8001730:	65fb      	str	r3, [r7, #92]	; 0x5c
				for(int i = 0; i < j;i++)
 8001732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001734:	3301      	adds	r3, #1
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
 8001738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800173c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800173e:	429a      	cmp	r2, r3
 8001740:	dbea      	blt.n	8001718 <touchscreen_update+0x2b4>
				}
				TxData[index] =  0x3A; // :
 8001742:	4a4a      	ldr	r2, [pc, #296]	; (800186c <touchscreen_update+0x408>)
 8001744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001746:	4413      	add	r3, r2
 8001748:	223a      	movs	r2, #58	; 0x3a
 800174a:	701a      	strb	r2, [r3, #0]
				index++;
 800174c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174e:	3301      	adds	r3, #1
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c

				TxData[index] =  0x22; // "
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <touchscreen_update+0x408>)
 8001754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001756:	4413      	add	r3, r2
 8001758:	2222      	movs	r2, #34	; 0x22
 800175a:	701a      	strb	r2, [r3, #0]
				index++;
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	3301      	adds	r3, #1
 8001760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001762:	e022      	b.n	80017aa <touchscreen_update+0x346>
			} else {
				j = sizeof(valueW)/sizeof(uint8_t);
 8001764:	2307      	movs	r3, #7
 8001766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				for(int i = 0; i < j;i++)
 800176a:	2300      	movs	r3, #0
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
 800176e:	e00f      	b.n	8001790 <touchscreen_update+0x32c>
				{
					TxData[index] =  valueW[i];
 8001770:	f107 0214 	add.w	r2, r7, #20
 8001774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001776:	4413      	add	r3, r2
 8001778:	7819      	ldrb	r1, [r3, #0]
 800177a:	4a3c      	ldr	r2, [pc, #240]	; (800186c <touchscreen_update+0x408>)
 800177c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
					index++;
 8001784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001786:	3301      	adds	r3, #1
 8001788:	65fb      	str	r3, [r7, #92]	; 0x5c
				for(int i = 0; i < j;i++)
 800178a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178c:	3301      	adds	r3, #1
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
 8001790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001796:	429a      	cmp	r2, r3
 8001798:	dbea      	blt.n	8001770 <touchscreen_update+0x30c>
				}
				TxData[index] =  0x3A; // :
 800179a:	4a34      	ldr	r2, [pc, #208]	; (800186c <touchscreen_update+0x408>)
 800179c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179e:	4413      	add	r3, r2
 80017a0:	223a      	movs	r2, #58	; 0x3a
 80017a2:	701a      	strb	r2, [r3, #0]
				index++;
 80017a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a6:	3301      	adds	r3, #1
 80017a8:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
//			TxData[index] = 0x2d; // -
//			index++;

			// Value input
			for(int i = 0; i < valueArrSize; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	643b      	str	r3, [r7, #64]	; 0x40
 80017ae:	e00e      	b.n	80017ce <touchscreen_update+0x36a>
			{
				TxData[index] = value[i];
 80017b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	7819      	ldrb	r1, [r3, #0]
 80017b8:	4a2c      	ldr	r2, [pc, #176]	; (800186c <touchscreen_update+0x408>)
 80017ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017bc:	4413      	add	r3, r2
 80017be:	460a      	mov	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
				index++;
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	3301      	adds	r3, #1
 80017c6:	65fb      	str	r3, [r7, #92]	; 0x5c
			for(int i = 0; i < valueArrSize; i++)
 80017c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ca:	3301      	adds	r3, #1
 80017cc:	643b      	str	r3, [r7, #64]	; 0x40
 80017ce:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80017d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbeb      	blt.n	80017b0 <touchscreen_update+0x34c>
			}
			if(!toggleText)
 80017d8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d117      	bne.n	8001810 <touchscreen_update+0x3ac>
			{
			TxData[index] = 0x64;  // d
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <touchscreen_update+0x408>)
 80017e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e4:	4413      	add	r3, r2
 80017e6:	2264      	movs	r2, #100	; 0x64
 80017e8:	701a      	strb	r2, [r3, #0]
			index++;
 80017ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ec:	3301      	adds	r3, #1
 80017ee:	65fb      	str	r3, [r7, #92]	; 0x5c
			TxData[index] = 0x42;  // B
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <touchscreen_update+0x408>)
 80017f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017f4:	4413      	add	r3, r2
 80017f6:	2242      	movs	r2, #66	; 0x42
 80017f8:	701a      	strb	r2, [r3, #0]
			index++;
 80017fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017fc:	3301      	adds	r3, #1
 80017fe:	65fb      	str	r3, [r7, #92]	; 0x5c
			TxData[index] = 0x22;  // "
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <touchscreen_update+0x408>)
 8001802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001804:	4413      	add	r3, r2
 8001806:	2222      	movs	r2, #34	; 0x22
 8001808:	701a      	strb	r2, [r3, #0]
			index++;
 800180a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180c:	3301      	adds	r3, #1
 800180e:	65fb      	str	r3, [r7, #92]	; 0x5c
//		{
//			TxData[index] = 0x22;  // "
//			index++;
//		}
		//Bracket
		TxData[index] = 0x7D;  // }
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <touchscreen_update+0x408>)
 8001812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001814:	4413      	add	r3, r2
 8001816:	227d      	movs	r2, #125	; 0x7d
 8001818:	701a      	strb	r2, [r3, #0]
		index++;
 800181a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181c:	3301      	adds	r3, #1
 800181e:	65fb      	str	r3, [r7, #92]	; 0x5c
		// Frame Tail
		TxData[index] = 0x3E; // >
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <touchscreen_update+0x408>)
 8001822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001824:	4413      	add	r3, r2
 8001826:	223e      	movs	r2, #62	; 0x3e
 8001828:	701a      	strb	r2, [r3, #0]
		index++;
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	3301      	adds	r3, #1
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
		TxData[index] = 0x45; // E
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <touchscreen_update+0x408>)
 8001832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001834:	4413      	add	r3, r2
 8001836:	2245      	movs	r2, #69	; 0x45
 8001838:	701a      	strb	r2, [r3, #0]
		index++;
 800183a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183c:	3301      	adds	r3, #1
 800183e:	65fb      	str	r3, [r7, #92]	; 0x5c
		TxData[index] = 0x54; // T
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <touchscreen_update+0x408>)
 8001842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001844:	4413      	add	r3, r2
 8001846:	2254      	movs	r2, #84	; 0x54
 8001848:	701a      	strb	r2, [r3, #0]
		index++;
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	3301      	adds	r3, #1
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
//		sizeof(TxData);

		HAL_UART_Transmit(&huart2,TxData, index,2000);
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	b29a      	uxth	r2, r3
 8001854:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <touchscreen_update+0x408>)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <touchscreen_update+0x40c>)
 800185c:	f005 fc4d 	bl	80070fa <HAL_UART_Transmit>
		clearTxData();
 8001860:	f7ff fd34 	bl	80012cc <clearTxData>
}
 8001864:	bf00      	nop
 8001866:	3760      	adds	r7, #96	; 0x60
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000003c 	.word	0x2000003c
 8001870:	200000b4 	.word	0x200000b4

08001874 <update_display_channel>:

//VOA var between 1-12
void update_display_channel(uint8_t VOA, uint8_t* atten, uint8_t size)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b093      	sub	sp, #76	; 0x4c
 8001878:	af02      	add	r7, sp, #8
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
	uint8_t cmdCode[] = {0x73, 0x65, 0x74,0x5F, 0x74, 0x65, 0x78, 0x74, 0x22}; // "set_text";
 8001884:	4a69      	ldr	r2, [pc, #420]	; (8001a2c <update_display_channel+0x1b8>)
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	ca07      	ldmia	r2, {r0, r1, r2}
 800188c:	c303      	stmia	r3!, {r0, r1}
 800188e:	701a      	strb	r2, [r3, #0]
	uint8_t type[] = {0x6C, 0x61, 0x62, 0x65, 0x6C, 0x22};            //"label";
 8001890:	4a67      	ldr	r2, [pc, #412]	; (8001a30 <update_display_channel+0x1bc>)
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189a:	6018      	str	r0, [r3, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	8019      	strh	r1, [r3, #0]
	uint8_t valArrSize = size;
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t temp, decimal_index;
	uint8_t value[12] = {0};
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
	uint8_t widgit[4] = {0x76, 0x6C, 0x31, 0x22};
 80018b4:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <update_display_channel+0x1c0>)
 80018b6:	617b      	str	r3, [r7, #20]
	uint8_t widgitTens[5] = {0x76, 0x6C, 0x31, 0x30, 0x22};
 80018b8:	4a5f      	ldr	r2, [pc, #380]	; (8001a38 <update_display_channel+0x1c4>)
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	6018      	str	r0, [r3, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	7019      	strb	r1, [r3, #0]

	//"
		for(int i=0; i < valArrSize; i++){
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80018cc:	e02f      	b.n	800192e <update_display_channel+0xba>
			temp = atten[i];
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(temp == 0x2E){
 80018da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018de:	2b2e      	cmp	r3, #46	; 0x2e
 80018e0:	d118      	bne.n	8001914 <update_display_channel+0xa0>
				value[i] = 0x2E;
 80018e2:	f107 0218 	add.w	r2, r7, #24
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	4413      	add	r3, r2
 80018ea:	222e      	movs	r2, #46	; 0x2e
 80018ec:	701a      	strb	r2, [r3, #0]
				if(i == valArrSize-1) //adds 0 to end of array if decimal is pressed last
 80018ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d116      	bne.n	8001928 <update_display_channel+0xb4>
				{
					value[i+1] = 0x30;
 80018fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fc:	3301      	adds	r3, #1
 80018fe:	3340      	adds	r3, #64	; 0x40
 8001900:	443b      	add	r3, r7
 8001902:	2230      	movs	r2, #48	; 0x30
 8001904:	f803 2c28 	strb.w	r2, [r3, #-40]
					valArrSize++;
 8001908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800190c:	3301      	adds	r3, #1
 800190e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 8001912:	e011      	b.n	8001938 <update_display_channel+0xc4>
				}
			} else {
				value[i] = temp + 0x30;
 8001914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001918:	3330      	adds	r3, #48	; 0x30
 800191a:	b2d9      	uxtb	r1, r3
 800191c:	f107 0218 	add.w	r2, r7, #24
 8001920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < valArrSize; i++){
 8001928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192a:	3301      	adds	r3, #1
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
 800192e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001934:	429a      	cmp	r2, r3
 8001936:	dbca      	blt.n	80018ce <update_display_channel+0x5a>
			}
		}

	// Switch Statements to update widgit (VOA channnel)
	if(VOA == 1) widgit[2] =  0x31;   // "vl1";
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <update_display_channel+0xd0>
 800193e:	2331      	movs	r3, #49	; 0x31
 8001940:	75bb      	strb	r3, [r7, #22]
 8001942:	e04a      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 2) widgit[2] = 0x32;   // "vl2";
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d102      	bne.n	8001950 <update_display_channel+0xdc>
 800194a:	2332      	movs	r3, #50	; 0x32
 800194c:	75bb      	strb	r3, [r7, #22]
 800194e:	e044      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 3) widgit[2] = 0x33;   // "vl3";
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d102      	bne.n	800195c <update_display_channel+0xe8>
 8001956:	2333      	movs	r3, #51	; 0x33
 8001958:	75bb      	strb	r3, [r7, #22]
 800195a:	e03e      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 4) widgit[2] = 0x34;   // "vl4";
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d102      	bne.n	8001968 <update_display_channel+0xf4>
 8001962:	2334      	movs	r3, #52	; 0x34
 8001964:	75bb      	strb	r3, [r7, #22]
 8001966:	e038      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 5) widgit[2] = 0x35;   // "vl5";
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d102      	bne.n	8001974 <update_display_channel+0x100>
 800196e:	2335      	movs	r3, #53	; 0x35
 8001970:	75bb      	strb	r3, [r7, #22]
 8001972:	e032      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 6) widgit[2] = 0x36;  // "vl6";
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d102      	bne.n	8001980 <update_display_channel+0x10c>
 800197a:	2336      	movs	r3, #54	; 0x36
 800197c:	75bb      	strb	r3, [r7, #22]
 800197e:	e02c      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 7) widgit[2] = 0x37;   // "vl7";
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b07      	cmp	r3, #7
 8001984:	d102      	bne.n	800198c <update_display_channel+0x118>
 8001986:	2337      	movs	r3, #55	; 0x37
 8001988:	75bb      	strb	r3, [r7, #22]
 800198a:	e026      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 8) widgit[2] = 0x38;   // "vl8";
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d102      	bne.n	8001998 <update_display_channel+0x124>
 8001992:	2338      	movs	r3, #56	; 0x38
 8001994:	75bb      	strb	r3, [r7, #22]
 8001996:	e020      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 9) widgit[2] = 0x39;   // "vl9";
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b09      	cmp	r3, #9
 800199c:	d102      	bne.n	80019a4 <update_display_channel+0x130>
 800199e:	2339      	movs	r3, #57	; 0x39
 80019a0:	75bb      	strb	r3, [r7, #22]
 80019a2:	e01a      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 10) widgitTens[3] = 0x30;   // "vl10";
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b0a      	cmp	r3, #10
 80019a8:	d102      	bne.n	80019b0 <update_display_channel+0x13c>
 80019aa:	2330      	movs	r3, #48	; 0x30
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e014      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 11) widgitTens[3] = 0x31;  // "vl11";
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b0b      	cmp	r3, #11
 80019b4:	d102      	bne.n	80019bc <update_display_channel+0x148>
 80019b6:	2331      	movs	r3, #49	; 0x31
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e00e      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == 12) widgitTens[3] = 0x32;   // "vl12";
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d102      	bne.n	80019c8 <update_display_channel+0x154>
 80019c2:	2332      	movs	r3, #50	; 0x32
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e008      	b.n	80019da <update_display_channel+0x166>
	else if(VOA == INPUT_FIELD_T)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <update_display_channel+0x166>
	{
		widgit[0] = 0x69; // "in1"
 80019ce:	2369      	movs	r3, #105	; 0x69
 80019d0:	753b      	strb	r3, [r7, #20]
		widgit[1] = 0x6E;
 80019d2:	236e      	movs	r3, #110	; 0x6e
 80019d4:	757b      	strb	r3, [r7, #21]
		widgit[2] = 0x31;
 80019d6:	2331      	movs	r3, #49	; 0x31
 80019d8:	75bb      	strb	r3, [r7, #22]
	}

	if(VOA < 10)touchscreen_update(cmdCode,type, widgit, value, valArrSize,0);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	d810      	bhi.n	8001a02 <update_display_channel+0x18e>
 80019e0:	f107 0418 	add.w	r4, r7, #24
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80019f0:	2300      	movs	r3, #0
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	4623      	mov	r3, r4
 80019fc:	f7ff fd32 	bl	8001464 <touchscreen_update>
	else touchscreen_update(cmdCode,type, widgitTens, value, valArrSize,0);

}
 8001a00:	e00f      	b.n	8001a22 <update_display_channel+0x1ae>
	else touchscreen_update(cmdCode,type, widgitTens, value, valArrSize,0);
 8001a02:	f107 0418 	add.w	r4, r7, #24
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a0e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	f7ff fd21 	bl	8001464 <touchscreen_update>
}
 8001a22:	bf00      	nop
 8001a24:	3744      	adds	r7, #68	; 0x44
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	08007d60 	.word	0x08007d60
 8001a30:	08007d6c 	.word	0x08007d6c
 8001a34:	22316c76 	.word	0x22316c76
 8001a38:	08007d74 	.word	0x08007d74

08001a3c <touchscreen_receive_callback>:

	uint8_t widgit[] = {0x76, 0x6C, 0x31, 0x22};        // "vl1";
	touchscreen_update(cmdCode,type, widgit, value, valArrSize,0);
}

void touchscreen_receive_callback(void){
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
	touchscreenInputs = parseUART();
 8001a42:	4c10      	ldr	r4, [pc, #64]	; (8001a84 <touchscreen_receive_callback+0x48>)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fc5a 	bl	8001300 <parseUART>
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	463b      	mov	r3, r7
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	6858      	ldr	r0, [r3, #4]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	6014      	str	r4, [r2, #0]
 8001a5a:	6050      	str	r0, [r2, #4]
 8001a5c:	6091      	str	r1, [r2, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
	parseTouchIn(touchscreenInputs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <touchscreen_receive_callback+0x48>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4610      	mov	r0, r2
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	689c      	ldr	r4, [r3, #8]
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	68dc      	ldr	r4, [r3, #12]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f7ff fa0b 	bl	8000e8c <parseTouchIn>

	/* 1) Clear Rx_data
	 * 2) Parse touchscreenInputs
	 * 3) Set global Variables for CMD code ex..
	 */
	 clearRxData();
 8001a76:	f7ff fc0f 	bl	8001298 <clearRxData>
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001c0 	.word	0x200001c0

08001a88 <lockTouchscreen>:

void lockTouchscreen(void)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af02      	add	r7, sp, #8
   uint8_t cmd[] = {0x6F, 0x70, 0x65, 0x6E, 0x5F, 0x77, 0x69, 0x6E, 0x22};
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <lockTouchscreen+0x58>)
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a96:	c303      	stmia	r3!, {r0, r1}
 8001a98:	701a      	strb	r2, [r3, #0]
   uint8_t type[] = {0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x22};
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <lockTouchscreen+0x5c>)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa4:	6018      	str	r0, [r3, #0]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	8019      	strh	r1, [r3, #0]
 8001aaa:	3302      	adds	r3, #2
 8001aac:	0c0a      	lsrs	r2, r1, #16
 8001aae:	701a      	strb	r2, [r3, #0]
   uint8_t widgit[] = {0x70, 0x61, 0x75, 0x73, 0x65, 0x22}; // "pause"
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <lockTouchscreen+0x60>)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab8:	6018      	str	r0, [r3, #0]
 8001aba:	3304      	adds	r3, #4
 8001abc:	8019      	strh	r1, [r3, #0]
   uint8_t temp[] = {};
   touchscreen_update(cmd,type,widgit,temp,0,0); // Lock TS
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	1d3a      	adds	r2, r7, #4
 8001ac2:	f107 010c 	add.w	r1, r7, #12
 8001ac6:	f107 0014 	add.w	r0, r7, #20
 8001aca:	2400      	movs	r4, #0
 8001acc:	9401      	str	r4, [sp, #4]
 8001ace:	2400      	movs	r4, #0
 8001ad0:	9400      	str	r4, [sp, #0]
 8001ad2:	f7ff fcc7 	bl	8001464 <touchscreen_update>
}
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	08007d7c 	.word	0x08007d7c
 8001ae4:	08007d88 	.word	0x08007d88
 8001ae8:	08007d90 	.word	0x08007d90

08001aec <selectChannel>:

void selectChannel(void){
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b08f      	sub	sp, #60	; 0x3c
 8001af0:	af02      	add	r7, sp, #8
	uint8_t voaChannel = voaSelected;
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <selectChannel+0x18c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t selected = highlight;
 8001afa:	4b60      	ldr	r3, [pc, #384]	; (8001c7c <selectChannel+0x190>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t cmdCode[] = {0x73, 0x65, 0x74,0x5F, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x22}; //set_value
 8001b02:	4a5f      	ldr	r2, [pc, #380]	; (8001c80 <selectChannel+0x194>)
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b0a:	c303      	stmia	r3!, {r0, r1}
 8001b0c:	801a      	strh	r2, [r3, #0]
	uint8_t type[] = {0x70, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x62, 0x61, 0x72, 0x22}; //progress_bar
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <selectChannel+0x198>)
 8001b10:	f107 0410 	add.w	r4, r7, #16
 8001b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b16:	c407      	stmia	r4!, {r0, r1, r2}
 8001b18:	7023      	strb	r3, [r4, #0]
	uint8_t widgit[3] = {0x73, 0x00, 0x22};
 8001b1a:	4a5b      	ldr	r2, [pc, #364]	; (8001c88 <selectChannel+0x19c>)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4611      	mov	r1, r2
 8001b24:	8019      	strh	r1, [r3, #0]
 8001b26:	3302      	adds	r3, #2
 8001b28:	0c12      	lsrs	r2, r2, #16
 8001b2a:	701a      	strb	r2, [r3, #0]
	uint8_t widgitTens[4] = {0x73, 0x31, 0x00, 0x22};
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <selectChannel+0x1a0>)
 8001b2e:	60bb      	str	r3, [r7, #8]
	uint8_t valueHundred[] = {0x31,0x30,0x30};
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <selectChannel+0x1a4>)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4611      	mov	r1, r2
 8001b38:	8019      	strh	r1, [r3, #0]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	0c12      	lsrs	r2, r2, #16
 8001b3e:	701a      	strb	r2, [r3, #0]
	uint8_t value[] = {0x30};
 8001b40:	2330      	movs	r3, #48	; 0x30
 8001b42:	703b      	strb	r3, [r7, #0]

	// toggle touchscreen update to remove label setting
	uint8_t toggle = 1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// Channels 1 - 9

	if(voaChannel == 1) widgit[1] = 0x31;
 8001b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <selectChannel+0x6a>
 8001b52:	2331      	movs	r3, #49	; 0x31
 8001b54:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 2) widgit[1] = 0x32;
 8001b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d101      	bne.n	8001b62 <selectChannel+0x76>
 8001b5e:	2332      	movs	r3, #50	; 0x32
 8001b60:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 3) widgit[1] = 0x33;
 8001b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d101      	bne.n	8001b6e <selectChannel+0x82>
 8001b6a:	2333      	movs	r3, #51	; 0x33
 8001b6c:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 4) widgit[1] = 0x34;
 8001b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d101      	bne.n	8001b7a <selectChannel+0x8e>
 8001b76:	2334      	movs	r3, #52	; 0x34
 8001b78:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 5) widgit[1] = 0x35;
 8001b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d101      	bne.n	8001b86 <selectChannel+0x9a>
 8001b82:	2335      	movs	r3, #53	; 0x35
 8001b84:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 6) widgit[1] = 0x36;
 8001b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d101      	bne.n	8001b92 <selectChannel+0xa6>
 8001b8e:	2336      	movs	r3, #54	; 0x36
 8001b90:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 7) widgit[1] = 0x37;
 8001b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b96:	2b07      	cmp	r3, #7
 8001b98:	d101      	bne.n	8001b9e <selectChannel+0xb2>
 8001b9a:	2337      	movs	r3, #55	; 0x37
 8001b9c:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 8) widgit[1] = 0x38;
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d101      	bne.n	8001baa <selectChannel+0xbe>
 8001ba6:	2338      	movs	r3, #56	; 0x38
 8001ba8:	737b      	strb	r3, [r7, #13]
	if(voaChannel == 9) widgit[1] = 0x39;
 8001baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	d101      	bne.n	8001bb6 <selectChannel+0xca>
 8001bb2:	2339      	movs	r3, #57	; 0x39
 8001bb4:	737b      	strb	r3, [r7, #13]
	// Channels 10- 12
	if(voaChannel == 10) widgitTens[2] = 0x30;
 8001bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bba:	2b0a      	cmp	r3, #10
 8001bbc:	d101      	bne.n	8001bc2 <selectChannel+0xd6>
 8001bbe:	2330      	movs	r3, #48	; 0x30
 8001bc0:	72bb      	strb	r3, [r7, #10]
	if(voaChannel == 11) widgitTens[2] = 0x31;
 8001bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc6:	2b0b      	cmp	r3, #11
 8001bc8:	d101      	bne.n	8001bce <selectChannel+0xe2>
 8001bca:	2331      	movs	r3, #49	; 0x31
 8001bcc:	72bb      	strb	r3, [r7, #10]
	if(voaChannel == 12) widgitTens[2] = 0x32;
 8001bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d101      	bne.n	8001bda <selectChannel+0xee>
 8001bd6:	2332      	movs	r3, #50	; 0x32
 8001bd8:	72bb      	strb	r3, [r7, #10]

	if(voaChannel < 10)
 8001bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d823      	bhi.n	8001c2a <selectChannel+0x13e>
	{
		if(!selected) touchscreen_update(cmdCode,type,widgit,value,1,toggle);
 8001be2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10f      	bne.n	8001c0a <selectChannel+0x11e>
 8001bea:	463c      	mov	r4, r7
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	f107 0110 	add.w	r1, r7, #16
 8001bf4:	f107 0020 	add.w	r0, r7, #32
 8001bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4623      	mov	r3, r4
 8001c04:	f7ff fc2e 	bl	8001464 <touchscreen_update>
	else
	{
		if(!selected) touchscreen_update(cmdCode,type,widgitTens,value,1,toggle);
		else touchscreen_update(cmdCode,type,widgitTens,valueHundred,3,toggle);
	}
}
 8001c08:	e032      	b.n	8001c70 <selectChannel+0x184>
		else touchscreen_update(cmdCode,type,widgit,valueHundred,3,toggle);
 8001c0a:	1d3c      	adds	r4, r7, #4
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	f107 0110 	add.w	r1, r7, #16
 8001c14:	f107 0020 	add.w	r0, r7, #32
 8001c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2303      	movs	r3, #3
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4623      	mov	r3, r4
 8001c24:	f7ff fc1e 	bl	8001464 <touchscreen_update>
}
 8001c28:	e022      	b.n	8001c70 <selectChannel+0x184>
		if(!selected) touchscreen_update(cmdCode,type,widgitTens,value,1,toggle);
 8001c2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <selectChannel+0x166>
 8001c32:	463c      	mov	r4, r7
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	f107 0110 	add.w	r1, r7, #16
 8001c3c:	f107 0020 	add.w	r0, r7, #32
 8001c40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	f7ff fc0a 	bl	8001464 <touchscreen_update>
}
 8001c50:	e00e      	b.n	8001c70 <selectChannel+0x184>
		else touchscreen_update(cmdCode,type,widgitTens,valueHundred,3,toggle);
 8001c52:	1d3c      	adds	r4, r7, #4
 8001c54:	f107 0208 	add.w	r2, r7, #8
 8001c58:	f107 0110 	add.w	r1, r7, #16
 8001c5c:	f107 0020 	add.w	r0, r7, #32
 8001c60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2303      	movs	r3, #3
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7ff fbfa 	bl	8001464 <touchscreen_update>
}
 8001c70:	bf00      	nop
 8001c72:	3734      	adds	r7, #52	; 0x34
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	200000b2 	.word	0x200000b2
 8001c7c:	200000b3 	.word	0x200000b3
 8001c80:	08007d98 	.word	0x08007d98
 8001c84:	08007da4 	.word	0x08007da4
 8001c88:	08007db4 	.word	0x08007db4
 8001c8c:	22003173 	.word	0x22003173
 8001c90:	08007db8 	.word	0x08007db8

08001c94 <deselectVOA>:

void deselectVOA(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_VOAS; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	e00d      	b.n	8001cbc <deselectVOA+0x28>
	{
		voaSelected = i+1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <deselectVOA+0x38>)
 8001caa:	701a      	strb	r2, [r3, #0]
		highlight = 0;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <deselectVOA+0x3c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		selectChannel();
 8001cb2:	f7ff ff1b 	bl	8001aec <selectChannel>
	for(int i=0; i<NUM_OF_VOAS; i++)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b0b      	cmp	r3, #11
 8001cc0:	ddee      	ble.n	8001ca0 <deselectVOA+0xc>
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200000b2 	.word	0x200000b2
 8001cd0:	200000b3 	.word	0x200000b3

08001cd4 <update_curr_voa_info>:
uint8_t *get_VOA_atten_arr(uint8_t VOA);
void clear_voa_update_flag(uint8_t VOA);


/* Private user code ---------------------------------------------------------*/
void update_curr_voa_info(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	float atten_local = voa_settings.atten;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <update_curr_voa_info+0xb0>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]
	uint16_t voa_selected = getVOA();
 8001ce0:	f7ff f95c 	bl	8000f9c <getVOA>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	817b      	strh	r3, [r7, #10]
	uint8_t *voa_value_arr;
	for(int i=0; i<NUM_OF_VOAS; i++){
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e03c      	b.n	8001d68 <update_curr_voa_info+0x94>
		if(voa_selected & (1<<i)){
 8001cee:	897a      	ldrh	r2, [r7, #10]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa42 f303 	asr.w	r3, r2, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <update_curr_voa_info+0x6c>
			voa_value_arr = get_VOA_atten_arr(i+1);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f9dc 	bl	80020c4 <get_VOA_atten_arr>
 8001d0c:	6078      	str	r0, [r7, #4]
			curr_voa_info.arr_size[i] = np_buffer.index;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <update_curr_voa_info+0xb4>)
 8001d10:	7b59      	ldrb	r1, [r3, #13]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <update_curr_voa_info+0xb8>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	333c      	adds	r3, #60	; 0x3c
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<INPUT_NUM_LENGTH; j++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00a      	b.n	8001d3a <update_curr_voa_info+0x66>
				voa_value_arr[j] = np_buffer.buff[j];
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4917      	ldr	r1, [pc, #92]	; (8001d88 <update_curr_voa_info+0xb4>)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	440a      	add	r2, r1
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<INPUT_NUM_LENGTH; j++){
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	3301      	adds	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	ddf1      	ble.n	8001d24 <update_curr_voa_info+0x50>
			}
		}
		if(curr_voa_info.update_voa_atten & (1<<i)){
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <update_curr_voa_info+0xb8>)
 8001d42:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001d46:	461a      	mov	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa42 f303 	asr.w	r3, r2, r3
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <update_curr_voa_info+0x8e>
			curr_voa_info.curr_atten[i] = atten_local;
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <update_curr_voa_info+0xb8>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3312      	adds	r3, #18
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<NUM_OF_VOAS; i++){
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b0b      	cmp	r3, #11
 8001d6c:	ddbf      	ble.n	8001cee <update_curr_voa_info+0x1a>
		}
	}
	clearVOA();
 8001d6e:	f7ff fa75 	bl	800125c <clearVOA>
//	curr_voa_info.update_voa_atten = curr_voa_info.update_voa_atten|voa_selected;
	curr_voa_info.update_display_atten = ALL_VOAS;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <update_curr_voa_info+0xb8>)
 8001d74:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d78:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000200 	.word	0x20000200
 8001d88:	200001f0 	.word	0x200001f0
 8001d8c:	2000013c 	.word	0x2000013c

08001d90 <number_pad_cb>:

void number_pad_cb(void){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
	NUM_PRESSED_TYPEDEF key = *number_pad_read(get_pin_pressed());
 8001d96:	f000 fb1b 	bl	80023d0 <get_pin_pressed>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fd77 	bl	8002890 <number_pad_read>
 8001da2:	4602      	mov	r2, r0
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	8812      	ldrh	r2, [r2, #0]
 8001da8:	801a      	strh	r2, [r3, #0]
	//if statement to decide which function to call:
	switch(key.type){
 8001daa:	797b      	ldrb	r3, [r7, #5]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d84c      	bhi.n	8001e4c <number_pad_cb+0xbc>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <number_pad_cb+0x28>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001dd5 	.word	0x08001dd5
 8001dbc:	08001de5 	.word	0x08001de5
 8001dc0:	08001df5 	.word	0x08001df5
 8001dc4:	08001e19 	.word	0x08001e19
 8001dc8:	08001e25 	.word	0x08001e25
 8001dcc:	08001e35 	.word	0x08001e35
 8001dd0:	08001e41 	.word	0x08001e41
		case num:
			add_to_buffer(key.keyPressed);
 8001dd4:	793b      	ldrb	r3, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fbce 	bl	8002578 <add_to_buffer>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001ddc:	2004      	movs	r0, #4
 8001dde:	f000 ff49 	bl	8002c74 <add_scheduled_event>
			break;
 8001de2:	e033      	b.n	8001e4c <number_pad_cb+0xbc>
		case dec:
			add_to_buffer(key.keyPressed);
 8001de4:	793b      	ldrb	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fbc6 	bl	8002578 <add_to_buffer>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001dec:	2004      	movs	r0, #4
 8001dee:	f000 ff41 	bl	8002c74 <add_scheduled_event>
			break;
 8001df2:	e02b      	b.n	8001e4c <number_pad_cb+0xbc>
		case enter:
			update_curr_voa_info();
 8001df4:	f7ff ff6e 	bl	8001cd4 <update_curr_voa_info>
			reset_np_buffer();
 8001df8:	f000 fc7c 	bl	80026f4 <reset_np_buffer>
			reset_voa_setting_buff();
 8001dfc:	f000 fc9a 	bl	8002734 <reset_voa_setting_buff>
			touchscreen_state = UPDATE_ALL_CH;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <number_pad_cb+0xc4>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001e06:	2004      	movs	r0, #4
 8001e08:	f000 ff34 	bl	8002c74 <add_scheduled_event>
			add_scheduled_event(SET_ATTEN_CB);
 8001e0c:	2010      	movs	r0, #16
 8001e0e:	f000 ff31 	bl	8002c74 <add_scheduled_event>
			deselectVOA();
 8001e12:	f7ff ff3f 	bl	8001c94 <deselectVOA>
			break;
 8001e16:	e019      	b.n	8001e4c <number_pad_cb+0xbc>
		case delete:
			delete_num();
 8001e18:	f000 fca4 	bl	8002764 <delete_num>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001e1c:	2004      	movs	r0, #4
 8001e1e:	f000 ff29 	bl	8002c74 <add_scheduled_event>
			break;
 8001e22:	e013      	b.n	8001e4c <number_pad_cb+0xbc>
		case clear:
			reset_np_buffer();
 8001e24:	f000 fc66 	bl	80026f4 <reset_np_buffer>
			reset_voa_setting_buff();
 8001e28:	f000 fc84 	bl	8002734 <reset_voa_setting_buff>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001e2c:	2004      	movs	r0, #4
 8001e2e:	f000 ff21 	bl	8002c74 <add_scheduled_event>
			break;
 8001e32:	e00b      	b.n	8001e4c <number_pad_cb+0xbc>
		case min:
			set_min_atten();
 8001e34:	f000 fd12 	bl	800285c <set_min_atten>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001e38:	2004      	movs	r0, #4
 8001e3a:	f000 ff1b 	bl	8002c74 <add_scheduled_event>
			break;
 8001e3e:	e005      	b.n	8001e4c <number_pad_cb+0xbc>
		case max:
			set_max_atten();
 8001e40:	f000 fd17 	bl	8002872 <set_max_atten>
			add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001e44:	2004      	movs	r0, #4
 8001e46:	f000 ff15 	bl	8002c74 <add_scheduled_event>
			break;
 8001e4a:	bf00      	nop
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200001b8 	.word	0x200001b8

08001e58 <set_atten_callback>:


void set_atten_callback(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_VOAS; i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	e018      	b.n	8001e96 <set_atten_callback+0x3e>
		if(curr_voa_info.update_voa_atten & (1<<i)){
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <set_atten_callback+0x50>)
 8001e66:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	fa42 f303 	asr.w	r3, r2, r3
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <set_atten_callback+0x38>
			set_attenuation(curr_voa_info.curr_atten[i]);
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <set_atten_callback+0x50>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3312      	adds	r3, #18
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f91b 	bl	80030c0 <set_attenuation>
//			curr_voa_info.update_voa_atten = curr_voa_info.update_voa_atten & !(1<<i);
//			voa_query_request();
			add_scheduled_event(CHECK_ATTEN_CB);
 8001e8a:	2020      	movs	r0, #32
 8001e8c:	f000 fef2 	bl	8002c74 <add_scheduled_event>
	for(int i=0; i<NUM_OF_VOAS; i++){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	dde3      	ble.n	8001e64 <set_atten_callback+0xc>
		}
	}
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000013c 	.word	0x2000013c

08001eac <check_atten_callback>:

void check_atten_callback(void){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
//	if(voa_settings.action == query){
		float check_atten = query_attenuation();				// atten read from voa
 8001eb2:	f001 f94f 	bl	8003154 <query_attenuation>
 8001eb6:	6078      	str	r0, [r7, #4]
		check_atten = query_attenuation();
 8001eb8:	f001 f94c 	bl	8003154 <query_attenuation>
 8001ebc:	6078      	str	r0, [r7, #4]
		float set_atten = ((uint32_t)(curr_voa_info.curr_atten[0]*100))&0xff;  // atten previously set
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <check_atten_callback+0x3c>)
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <check_atten_callback+0x40>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fe3d 	bl	8000b44 <__aeabi_fmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ffaf 	bl	8000e30 <__aeabi_f2uiz>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fddc 	bl	8000a94 <__aeabi_ui2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	603b      	str	r3, [r7, #0]
		if(check_atten != set_atten){
//			Error_Handler();
		}
//	}
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000013c 	.word	0x2000013c
 8001eec:	42c80000 	.word	0x42c80000

08001ef0 <touchscreen_transmit_cb>:

void touchscreen_transmit_cb(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	uint8_t VOA;
	uint8_t *atten_value;
	switch(touchscreen_state){
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <touchscreen_transmit_cb+0x74>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <touchscreen_transmit_cb+0x14>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d008      	beq.n	8001f14 <touchscreen_transmit_cb+0x24>
			touchscreen_state = INPUT_FIELD;
		}
		add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
		break;
	}
}
 8001f02:	e02b      	b.n	8001f5c <touchscreen_transmit_cb+0x6c>
		update_display_channel(INPUT_FIELD_T, np_buffer.buff, np_buffer.index);
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <touchscreen_transmit_cb+0x78>)
 8001f06:	7b5b      	ldrb	r3, [r3, #13]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4917      	ldr	r1, [pc, #92]	; (8001f68 <touchscreen_transmit_cb+0x78>)
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fcb1 	bl	8001874 <update_display_channel>
		break;
 8001f12:	e023      	b.n	8001f5c <touchscreen_transmit_cb+0x6c>
		VOA = get_update_VOA();
 8001f14:	f000 f8b2 	bl	800207c <get_update_VOA>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
		atten_value = get_VOA_atten_arr(VOA);
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f8d0 	bl	80020c4 <get_VOA_atten_arr>
 8001f24:	6038      	str	r0, [r7, #0]
		update_display_channel(VOA, atten_value, curr_voa_info.arr_size[VOA-1]);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <touchscreen_transmit_cb+0x7c>)
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fc9c 	bl	8001874 <update_display_channel>
		clear_voa_update_flag(VOA);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f928 	bl	8002194 <clear_voa_update_flag>
		if(curr_voa_info.update_display_atten == 0){
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <touchscreen_transmit_cb+0x7c>)
 8001f46:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <touchscreen_transmit_cb+0x64>
			touchscreen_state = INPUT_FIELD;
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <touchscreen_transmit_cb+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
		add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8001f54:	2004      	movs	r0, #4
 8001f56:	f000 fe8d 	bl	8002c74 <add_scheduled_event>
		break;
 8001f5a:	bf00      	nop
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200001b8 	.word	0x200001b8
 8001f68:	200001f0 	.word	0x200001f0
 8001f6c:	2000013c 	.word	0x2000013c

08001f70 <touchscreen_init>:

void touchscreen_init(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	for(int i=0; i<INPUT_NUM_LENGTH; i++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	e049      	b.n	8002010 <touchscreen_init+0xa0>
		curr_voa_info.V1[i] = 0;
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <touchscreen_init+0x100>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V2[i] = 0;
 8001f86:	4a3a      	ldr	r2, [pc, #232]	; (8002070 <touchscreen_init+0x100>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3305      	adds	r3, #5
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V3[i] = 0;
 8001f92:	4a37      	ldr	r2, [pc, #220]	; (8002070 <touchscreen_init+0x100>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	330a      	adds	r3, #10
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V4[i] = 0;
 8001f9e:	4a34      	ldr	r2, [pc, #208]	; (8002070 <touchscreen_init+0x100>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	330f      	adds	r3, #15
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V5[i] = 0;
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <touchscreen_init+0x100>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V6[i] = 0;
 8001fb6:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <touchscreen_init+0x100>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3319      	adds	r3, #25
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V7[i] = 0;
 8001fc2:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <touchscreen_init+0x100>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	331e      	adds	r3, #30
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V8[i] = 0;
 8001fce:	4a28      	ldr	r2, [pc, #160]	; (8002070 <touchscreen_init+0x100>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3323      	adds	r3, #35	; 0x23
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V9[i] = 0;
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <touchscreen_init+0x100>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3328      	adds	r3, #40	; 0x28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V10[i] = 0;
 8001fe6:	4a22      	ldr	r2, [pc, #136]	; (8002070 <touchscreen_init+0x100>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	332d      	adds	r3, #45	; 0x2d
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V11[i] = 0;
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <touchscreen_init+0x100>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3332      	adds	r3, #50	; 0x32
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
		curr_voa_info.V12[i] = 0;
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <touchscreen_init+0x100>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3337      	adds	r3, #55	; 0x37
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<INPUT_NUM_LENGTH; i++){
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3301      	adds	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	ddb2      	ble.n	8001f7c <touchscreen_init+0xc>
	}
	for(int i=0; i<NUM_OF_VOAS; i++){
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	e00f      	b.n	800203c <touchscreen_init+0xcc>
		curr_voa_info.curr_atten[i] = 0;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <touchscreen_init+0x100>)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3312      	adds	r3, #18
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		curr_voa_info.arr_size[i] = 1;
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <touchscreen_init+0x100>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4413      	add	r3, r2
 8002030:	333c      	adds	r3, #60	; 0x3c
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUM_OF_VOAS; i++){
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b0b      	cmp	r3, #11
 8002040:	ddec      	ble.n	800201c <touchscreen_init+0xac>
	}
	curr_voa_info.update_voa_atten = 0b000000000001;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <touchscreen_init+0x100>)
 8002044:	2201      	movs	r2, #1
 8002046:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	curr_voa_info.update_display_atten = ALL_VOAS;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <touchscreen_init+0x100>)
 800204c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002050:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	touchscreen_state = UPDATE_ALL_CH;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <touchscreen_init+0x104>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
	add_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 800205a:	2004      	movs	r0, #4
 800205c:	f000 fe0a 	bl	8002c74 <add_scheduled_event>
	deviceLock = 0;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <touchscreen_init+0x108>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000013c 	.word	0x2000013c
 8002074:	200001b8 	.word	0x200001b8
 8002078:	200001b9 	.word	0x200001b9

0800207c <get_update_VOA>:

uint8_t get_update_VOA(void){
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_VOAS; i++){
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	e012      	b.n	80020ae <get_update_VOA+0x32>
		if(curr_voa_info.update_display_atten & (1<<i)){
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <get_update_VOA+0x44>)
 800208a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	fa42 f303 	asr.w	r3, r2, r3
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <get_update_VOA+0x2c>
			return i+1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e006      	b.n	80020b6 <get_update_VOA+0x3a>
	for(int i=0; i<NUM_OF_VOAS; i++){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0b      	cmp	r3, #11
 80020b2:	dde9      	ble.n	8002088 <get_update_VOA+0xc>
		}
	}
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	2000013c 	.word	0x2000013c

080020c4 <get_VOA_atten_arr>:

uint8_t *get_VOA_atten_arr(uint8_t VOA){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr_VOA_arr;
	switch(VOA){
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	2b0b      	cmp	r3, #11
 80020d4:	d83e      	bhi.n	8002154 <get_VOA_atten_arr+0x90>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <get_VOA_atten_arr+0x18>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	0800210d 	.word	0x0800210d
 80020e0:	08002113 	.word	0x08002113
 80020e4:	08002119 	.word	0x08002119
 80020e8:	0800211f 	.word	0x0800211f
 80020ec:	08002125 	.word	0x08002125
 80020f0:	0800212b 	.word	0x0800212b
 80020f4:	08002131 	.word	0x08002131
 80020f8:	08002137 	.word	0x08002137
 80020fc:	0800213d 	.word	0x0800213d
 8002100:	08002143 	.word	0x08002143
 8002104:	08002149 	.word	0x08002149
 8002108:	0800214f 	.word	0x0800214f
	case 1:
		ptr_VOA_arr = curr_voa_info.V1;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <get_VOA_atten_arr+0xa0>)
 800210e:	60fb      	str	r3, [r7, #12]
		break;
 8002110:	e022      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 2:
		ptr_VOA_arr = curr_voa_info.V2;
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <get_VOA_atten_arr+0xa4>)
 8002114:	60fb      	str	r3, [r7, #12]
		break;
 8002116:	e01f      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 3:
		ptr_VOA_arr = curr_voa_info.V3;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <get_VOA_atten_arr+0xa8>)
 800211a:	60fb      	str	r3, [r7, #12]
		break;
 800211c:	e01c      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 4:
		ptr_VOA_arr = curr_voa_info.V4;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <get_VOA_atten_arr+0xac>)
 8002120:	60fb      	str	r3, [r7, #12]
		break;
 8002122:	e019      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 5:
		ptr_VOA_arr = curr_voa_info.V5;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <get_VOA_atten_arr+0xb0>)
 8002126:	60fb      	str	r3, [r7, #12]
		break;
 8002128:	e016      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 6:
		ptr_VOA_arr = curr_voa_info.V6;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <get_VOA_atten_arr+0xb4>)
 800212c:	60fb      	str	r3, [r7, #12]
		break;
 800212e:	e013      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 7:
		ptr_VOA_arr = curr_voa_info.V7;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <get_VOA_atten_arr+0xb8>)
 8002132:	60fb      	str	r3, [r7, #12]
		break;
 8002134:	e010      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 8:
		ptr_VOA_arr = curr_voa_info.V8;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <get_VOA_atten_arr+0xbc>)
 8002138:	60fb      	str	r3, [r7, #12]
		break;
 800213a:	e00d      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 9:
		ptr_VOA_arr = curr_voa_info.V9;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <get_VOA_atten_arr+0xc0>)
 800213e:	60fb      	str	r3, [r7, #12]
		break;
 8002140:	e00a      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 10:
		ptr_VOA_arr = curr_voa_info.V10;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <get_VOA_atten_arr+0xc4>)
 8002144:	60fb      	str	r3, [r7, #12]
		break;
 8002146:	e007      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 11:
		ptr_VOA_arr = curr_voa_info.V11;
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <get_VOA_atten_arr+0xc8>)
 800214a:	60fb      	str	r3, [r7, #12]
		break;
 800214c:	e004      	b.n	8002158 <get_VOA_atten_arr+0x94>
	case 12:
		ptr_VOA_arr = curr_voa_info.V12;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <get_VOA_atten_arr+0xcc>)
 8002150:	60fb      	str	r3, [r7, #12]
		break;
 8002152:	e001      	b.n	8002158 <get_VOA_atten_arr+0x94>
	default:
		Error_Handler();
 8002154:	f000 fa0a 	bl	800256c <Error_Handler>
	}
	return ptr_VOA_arr;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000013c 	.word	0x2000013c
 8002168:	20000141 	.word	0x20000141
 800216c:	20000146 	.word	0x20000146
 8002170:	2000014b 	.word	0x2000014b
 8002174:	20000150 	.word	0x20000150
 8002178:	20000155 	.word	0x20000155
 800217c:	2000015a 	.word	0x2000015a
 8002180:	2000015f 	.word	0x2000015f
 8002184:	20000164 	.word	0x20000164
 8002188:	20000169 	.word	0x20000169
 800218c:	2000016e 	.word	0x2000016e
 8002190:	20000173 	.word	0x20000173

08002194 <clear_voa_update_flag>:

void clear_voa_update_flag(uint8_t VOA){
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	uint16_t voa_flag = (1<<(VOA-1));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	2201      	movs	r2, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	81fb      	strh	r3, [r7, #14]
	curr_voa_info.update_display_atten = curr_voa_info.update_display_atten & ~(voa_flag);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <clear_voa_update_flag+0x3c>)
 80021ac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	4013      	ands	r3, r2
 80021bc:	b21b      	sxth	r3, r3
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <clear_voa_update_flag+0x3c>)
 80021c2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	2000013c 	.word	0x2000013c

080021d4 <unlockDevice>:

void unlockDevice(void){
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
	deviceLock = 0;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <unlockDevice+0x14>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200001b9 	.word	0x200001b9

080021ec <lockDevice>:

void lockDevice(void){
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	deviceLock = 1;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <lockDevice+0x14>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200001b9 	.word	0x200001b9

08002204 <getDeviceLockStatus>:

uint8_t getDeviceLockStatus(void){
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
	return deviceLock;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <getDeviceLockStatus+0x10>)
 800220a:	781b      	ldrb	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	200001b9 	.word	0x200001b9

08002218 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief GPIO Interrupt Handler
  * @param GPIO_Pin indicates which pin triggered interrupt
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == (0x1<<4)){
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	2b10      	cmp	r3, #16
 8002226:	d102      	bne.n	800222e <HAL_GPIO_EXTI_Callback+0x16>
		/* VOA Busy Bit Interrupt */
		voa_busy();
 8002228:	f000 ff2a 	bl	8003080 <voa_busy>
		pin = GPIO_Pin;
		add_scheduled_event(NUMBER_PAD_CB);
	} else {
		pin = GPIO_Pin;
	}
}
 800222c:	e008      	b.n	8002240 <HAL_GPIO_EXTI_Callback+0x28>
		np_pressed = 1;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_GPIO_EXTI_Callback+0x30>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
		pin = GPIO_Pin;
 8002234:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_GPIO_EXTI_Callback+0x34>)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	8013      	strh	r3, [r2, #0]
		add_scheduled_event(NUMBER_PAD_CB);
 800223a:	2001      	movs	r0, #1
 800223c:	f000 fd1a 	bl	8002c74 <add_scheduled_event>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200001bc 	.word	0x200001bc
 800224c:	200001ba 	.word	0x200001ba

08002250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <MX_GPIO_Init+0x154>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a4e      	ldr	r2, [pc, #312]	; (80023a4 <MX_GPIO_Init+0x154>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <MX_GPIO_Init+0x154>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227c:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <MX_GPIO_Init+0x154>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <MX_GPIO_Init+0x154>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <MX_GPIO_Init+0x154>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800229a:	4843      	ldr	r0, [pc, #268]	; (80023a8 <MX_GPIO_Init+0x158>)
 800229c:	f001 fdf3 	bl	8003e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a6:	4841      	ldr	r0, [pc, #260]	; (80023ac <MX_GPIO_Init+0x15c>)
 80022a8:	f001 fded 	bl	8003e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB12 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7;
 80022ac:	f241 0383 	movw	r3, #4227	; 0x1083
 80022b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <MX_GPIO_Init+0x160>)
 80022b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b6:	2302      	movs	r3, #2
 80022b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4619      	mov	r1, r3
 80022c0:	4839      	ldr	r0, [pc, #228]	; (80023a8 <MX_GPIO_Init+0x158>)
 80022c2:	f001 fc4d 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2302      	movs	r3, #2
 80022d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	4832      	ldr	r0, [pc, #200]	; (80023a8 <MX_GPIO_Init+0x158>)
 80022e0:	f001 fc3e 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	482b      	ldr	r0, [pc, #172]	; (80023ac <MX_GPIO_Init+0x15c>)
 80022fe:	f001 fc2f 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002302:	2310      	movs	r3, #16
 8002304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <MX_GPIO_Init+0x164>)
 8002308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	4619      	mov	r1, r3
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <MX_GPIO_Init+0x158>)
 8002316:	f001 fc23 	bl	8003b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2006      	movs	r0, #6
 8002320:	f001 f92f 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002324:	2006      	movs	r0, #6
 8002326:	f001 f948 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2007      	movs	r0, #7
 8002330:	f001 f927 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002334:	2007      	movs	r0, #7
 8002336:	f001 f940 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200a      	movs	r0, #10
 8002340:	f001 f91f 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002344:	200a      	movs	r0, #10
 8002346:	f001 f938 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2017      	movs	r0, #23
 8002350:	f001 f917 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002354:	2017      	movs	r0, #23
 8002356:	f001 f930 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2028      	movs	r0, #40	; 0x28
 8002360:	f001 f90f 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002364:	2028      	movs	r0, #40	; 0x28
 8002366:	f001 f928 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <MX_GPIO_Init+0x158>)
 8002372:	f001 fd88 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800237c:	480a      	ldr	r0, [pc, #40]	; (80023a8 <MX_GPIO_Init+0x158>)
 800237e:	f001 fd82 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_GPIO_Init+0x158>)
 800238a:	f001 fd7c 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_GPIO_Init+0x15c>)
 8002396:	f001 fd76 	bl	8003e86 <HAL_GPIO_WritePin>

}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	40010800 	.word	0x40010800
 80023b0:	10110000 	.word	0x10110000
 80023b4:	10310000 	.word	0x10310000

080023b8 <gpio_init>:
/**
  * @brief GPIO Initialization Global Function
  * @param None
  * @retval None
  */
void gpio_init(void){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80023bc:	f7ff ff48 	bl	8002250 <MX_GPIO_Init>
	np_pressed = 0;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <gpio_init+0x14>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200001bc 	.word	0x200001bc

080023d0 <get_pin_pressed>:
  */
uint8_t get_np_pressed(void){
	return np_pressed;
}

uint16_t get_pin_pressed(void){
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	return pin;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <get_pin_pressed+0x10>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	200001ba 	.word	0x200001ba

080023e4 <reset_np_press>:

void reset_np_press(void){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	np_pressed = 0;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <reset_np_press+0x14>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200001bc 	.word	0x200001bc

080023fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002400:	f000 ff62 	bl	80032c8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002404:	f000 f877 	bl	80024f6 <SystemClock_Config>

  /* Initialize all configured peripherals */
  gpio_init();
 8002408:	f7ff ffd6 	bl	80023b8 <gpio_init>
  UART_init();
 800240c:	f7fe ffbc 	bl	8001388 <UART_init>
  scheduler_open();
 8002410:	f000 fc22 	bl	8002c58 <scheduler_open>
  voa_comm_init();
 8002414:	f000 fe02 	bl	800301c <voa_comm_init>
  number_pad_init();
 8002418:	f000 f944 	bl	80026a4 <number_pad_init>
  uart_receive_init();
 800241c:	f7fe fd28 	bl	8000e70 <uart_receive_init>
  touchscreen_init();
 8002420:	f7ff fda6 	bl	8001f70 <touchscreen_init>


  /* Infinite loop */
  while (1)
  {
	  while(get_scheduled_events() != 0){
 8002424:	e061      	b.n	80024ea <main+0xee>
		  if(get_scheduled_events() & AARDVARK_CB){
 8002426:	f000 fc4f 	bl	8002cc8 <get_scheduled_events>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <main+0x48>
			remove_scheduled_event(AARDVARK_CB);
 8002434:	2008      	movs	r0, #8
 8002436:	f000 fc31 	bl	8002c9c <remove_scheduled_event>
			lockTouchscreen();
 800243a:	f7ff fb25 	bl	8001a88 <lockTouchscreen>
			lockDevice();
 800243e:	f7ff fed5 	bl	80021ec <lockDevice>
//			aardvark_callback();
			break;
 8002442:	e057      	b.n	80024f4 <main+0xf8>
		  }

		  if(get_scheduled_events() & TOUCHSCREEN_RECEIVE_CB){
 8002444:	f000 fc40 	bl	8002cc8 <get_scheduled_events>
 8002448:	4603      	mov	r3, r0
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <main+0x62>
			remove_scheduled_event(TOUCHSCREEN_RECEIVE_CB);
 8002452:	2002      	movs	r0, #2
 8002454:	f000 fc22 	bl	8002c9c <remove_scheduled_event>
			touchscreen_receive_callback();
 8002458:	f7ff faf0 	bl	8001a3c <touchscreen_receive_callback>
			break;
 800245c:	e04a      	b.n	80024f4 <main+0xf8>
		  }

		  if(getDeviceLockStatus() == 0){
 800245e:	f7ff fed1 	bl	8002204 <getDeviceLockStatus>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d140      	bne.n	80024ea <main+0xee>
				if(get_scheduled_events() & NUMBER_PAD_CB){
 8002468:	f000 fc2e 	bl	8002cc8 <get_scheduled_events>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <main+0x86>
					remove_scheduled_event(NUMBER_PAD_CB);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fc10 	bl	8002c9c <remove_scheduled_event>
					number_pad_cb();
 800247c:	f7ff fc88 	bl	8001d90 <number_pad_cb>
					break;
 8002480:	e038      	b.n	80024f4 <main+0xf8>
				}

				if(get_scheduled_events() & TOUCHSCREEN_TRANSMIT_CB){
 8002482:	f000 fc21 	bl	8002cc8 <get_scheduled_events>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <main+0xa0>
					remove_scheduled_event(TOUCHSCREEN_TRANSMIT_CB);
 8002490:	2004      	movs	r0, #4
 8002492:	f000 fc03 	bl	8002c9c <remove_scheduled_event>
					touchscreen_transmit_cb();
 8002496:	f7ff fd2b 	bl	8001ef0 <touchscreen_transmit_cb>
					break;
 800249a:	e02b      	b.n	80024f4 <main+0xf8>
				}

				if(get_scheduled_events() & SET_ATTEN_CB){
 800249c:	f000 fc14 	bl	8002cc8 <get_scheduled_events>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <main+0xba>
					remove_scheduled_event(SET_ATTEN_CB);
 80024aa:	2010      	movs	r0, #16
 80024ac:	f000 fbf6 	bl	8002c9c <remove_scheduled_event>
					set_atten_callback();
 80024b0:	f7ff fcd2 	bl	8001e58 <set_atten_callback>
					break;
 80024b4:	e01e      	b.n	80024f4 <main+0xf8>
				}

				if(get_scheduled_events() & CHECK_ATTEN_CB){
 80024b6:	f000 fc07 	bl	8002cc8 <get_scheduled_events>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <main+0xd4>
					remove_scheduled_event(CHECK_ATTEN_CB);
 80024c4:	2020      	movs	r0, #32
 80024c6:	f000 fbe9 	bl	8002c9c <remove_scheduled_event>
					check_atten_callback();
 80024ca:	f7ff fcef 	bl	8001eac <check_atten_callback>
					break;
 80024ce:	e011      	b.n	80024f4 <main+0xf8>
				}

				if(get_scheduled_events() & TOUCHSCREEN_SELECT_CB){
 80024d0:	f000 fbfa 	bl	8002cc8 <get_scheduled_events>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <main+0xee>
					remove_scheduled_event(TOUCHSCREEN_SELECT_CB);
 80024de:	2040      	movs	r0, #64	; 0x40
 80024e0:	f000 fbdc 	bl	8002c9c <remove_scheduled_event>
					selectChannel();
 80024e4:	f7ff fb02 	bl	8001aec <selectChannel>
					break;
 80024e8:	e004      	b.n	80024f4 <main+0xf8>
	  while(get_scheduled_events() != 0){
 80024ea:	f000 fbed 	bl	8002cc8 <get_scheduled_events>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d198      	bne.n	8002426 <main+0x2a>
 80024f4:	e7f9      	b.n	80024ea <main+0xee>

080024f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b090      	sub	sp, #64	; 0x40
 80024fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	2228      	movs	r2, #40	; 0x28
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f005 fc01 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800251c:	2301      	movs	r3, #1
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002520:	2310      	movs	r3, #16
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	4618      	mov	r0, r3
 800252e:	f004 f97d 	bl	800682c <HAL_RCC_OscConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002538:	f000 f818 	bl	800256c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800253c:	230f      	movs	r3, #15
 800253e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f004 fbeb 	bl	8006d30 <HAL_RCC_ClockConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002560:	f000 f804 	bl	800256c <Error_Handler>
  }
}
 8002564:	bf00      	nop
 8002566:	3740      	adds	r7, #64	; 0x40
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
}
 8002572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002574:	e7fe      	b.n	8002574 <Error_Handler+0x8>
	...

08002578 <add_to_buffer>:
/* Private user code ---------------------------------------------------------*/


/* Private user code ---------------------------------------------------------*/

void add_to_buffer(uint8_t num){
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	float temp = (float)num;
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fa85 	bl	8000a94 <__aeabi_ui2f>
 800258a:	4603      	mov	r3, r0
 800258c:	617b      	str	r3, [r7, #20]
	uint8_t decPlaceValue = voa_settings.dec_place_value;
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <add_to_buffer+0x11c>)
 8002590:	7a5b      	ldrb	r3, [r3, #9]
 8002592:	73fb      	strb	r3, [r7, #15]
	if(in_range == 1)
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <add_to_buffer+0x120>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d177      	bne.n	800268c <add_to_buffer+0x114>
	{
		if(num == DEC_BUTTON)						// checks if decimal was typed
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b0e      	cmp	r3, #14
 80025a0:	d115      	bne.n	80025ce <add_to_buffer+0x56>
		{
			if(decPlaceValue == 0){
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d171      	bne.n	800268c <add_to_buffer+0x114>
				np_buffer.buff[np_buffer.index] = 0x2E;  // ascii "." added to buffer (touchscreen format)
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <add_to_buffer+0x124>)
 80025aa:	7b5b      	ldrb	r3, [r3, #13]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <add_to_buffer+0x124>)
 80025b0:	212e      	movs	r1, #46	; 0x2e
 80025b2:	5499      	strb	r1, [r3, r2]
				np_buffer.index++;
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <add_to_buffer+0x124>)
 80025b6:	7b5b      	ldrb	r3, [r3, #13]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <add_to_buffer+0x124>)
 80025be:	735a      	strb	r2, [r3, #13]
				voa_settings.dec_place_value++;			 // describes the place value of next num typed (1=tenths)
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <add_to_buffer+0x11c>)
 80025c2:	7a5b      	ldrb	r3, [r3, #9]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <add_to_buffer+0x11c>)
 80025ca:	725a      	strb	r2, [r3, #9]
				}
			}
			in_range = 1; 								// resets in_range for next num typed
		}
	}
}
 80025cc:	e05e      	b.n	800268c <add_to_buffer+0x114>
			if(decPlaceValue == 0)						// num is integer place value, not decimal
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11c      	bne.n	800260e <add_to_buffer+0x96>
				voa_settings.integer = voa_settings.integer*10 + num;
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <add_to_buffer+0x11c>)
 80025d6:	7a1b      	ldrb	r3, [r3, #8]
 80025d8:	461a      	mov	r2, r3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4413      	add	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <add_to_buffer+0x11c>)
 80025ea:	721a      	strb	r2, [r3, #8]
				if(voa_settings.integer > 30.0)
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <add_to_buffer+0x11c>)
 80025ee:	7a1b      	ldrb	r3, [r3, #8]
 80025f0:	2b1e      	cmp	r3, #30
 80025f2:	d903      	bls.n	80025fc <add_to_buffer+0x84>
					in_range = 0;
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <add_to_buffer+0x120>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e028      	b.n	800264e <add_to_buffer+0xd6>
					voa_settings.atten = (float)voa_settings.integer;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <add_to_buffer+0x11c>)
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fa47 	bl	8000a94 <__aeabi_ui2f>
 8002606:	4603      	mov	r3, r0
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <add_to_buffer+0x11c>)
 800260a:	6053      	str	r3, [r2, #4]
 800260c:	e01f      	b.n	800264e <add_to_buffer+0xd6>
				for(int i=0; i<decPlaceValue; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e008      	b.n	8002626 <add_to_buffer+0xae>
					temp = temp/10.0;
 8002614:	4922      	ldr	r1, [pc, #136]	; (80026a0 <add_to_buffer+0x128>)
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7fe fb48 	bl	8000cac <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	617b      	str	r3, [r7, #20]
				for(int i=0; i<decPlaceValue; i++)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	3301      	adds	r3, #1
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	dbf2      	blt.n	8002614 <add_to_buffer+0x9c>
				voa_settings.atten =(float)voa_settings.atten + temp;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <add_to_buffer+0x11c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	6979      	ldr	r1, [r7, #20]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe f97d 	bl	8000934 <__addsf3>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <add_to_buffer+0x11c>)
 8002640:	605a      	str	r2, [r3, #4]
				voa_settings.dec_place_value++;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <add_to_buffer+0x11c>)
 8002644:	7a5b      	ldrb	r3, [r3, #9]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <add_to_buffer+0x11c>)
 800264c:	725a      	strb	r2, [r3, #9]
			if(in_range ==1)
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <add_to_buffer+0x120>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d117      	bne.n	8002686 <add_to_buffer+0x10e>
				if((np_buffer.index == 1) && (np_buffer.buff[0] == 0)) 	//if first and only elem is 0, then replace with new num
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <add_to_buffer+0x124>)
 8002658:	7b5b      	ldrb	r3, [r3, #13]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <add_to_buffer+0xf6>
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <add_to_buffer+0x124>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <add_to_buffer+0xf6>
					np_buffer.buff[0] = num;
 8002666:	4a0d      	ldr	r2, [pc, #52]	; (800269c <add_to_buffer+0x124>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	7013      	strb	r3, [r2, #0]
 800266c:	e00b      	b.n	8002686 <add_to_buffer+0x10e>
					np_buffer.buff[np_buffer.index] = num;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <add_to_buffer+0x124>)
 8002670:	7b5b      	ldrb	r3, [r3, #13]
 8002672:	4619      	mov	r1, r3
 8002674:	4a09      	ldr	r2, [pc, #36]	; (800269c <add_to_buffer+0x124>)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	5453      	strb	r3, [r2, r1]
					np_buffer.index++;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <add_to_buffer+0x124>)
 800267c:	7b5b      	ldrb	r3, [r3, #13]
 800267e:	3301      	adds	r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <add_to_buffer+0x124>)
 8002684:	735a      	strb	r2, [r3, #13]
			in_range = 1; 								// resets in_range for next num typed
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <add_to_buffer+0x120>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000200 	.word	0x20000200
 8002698:	2000020c 	.word	0x2000020c
 800269c:	200001f0 	.word	0x200001f0
 80026a0:	41200000 	.word	0x41200000

080026a4 <number_pad_init>:

void number_pad_init(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	reset_np_buffer();
 80026a8:	f000 f824 	bl	80026f4 <reset_np_buffer>
	set = 1;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <number_pad_init+0x40>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
	keyPressed = 0;
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <number_pad_init+0x44>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
	voa_settings.action = none;
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <number_pad_init+0x48>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
	voa_settings.atten = 0.0;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <number_pad_init+0x48>)
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
	voa_settings.integer = 0;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <number_pad_init+0x48>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	721a      	strb	r2, [r3, #8]
	voa_settings.dec_place_value = 0;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <number_pad_init+0x48>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	725a      	strb	r2, [r3, #9]
	voa_settings.dec_value = 0;
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <number_pad_init+0x48>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	729a      	strb	r2, [r3, #10]
	in_range = 1;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <number_pad_init+0x4c>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200001e0 	.word	0x200001e0
 80026e8:	200001ec 	.word	0x200001ec
 80026ec:	20000200 	.word	0x20000200
 80026f0:	2000020c 	.word	0x2000020c

080026f4 <reset_np_buffer>:

void reset_np_buffer(void){
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
	for(int i =0; i<12; i++){
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	e007      	b.n	8002710 <reset_np_buffer+0x1c>
		np_buffer.buff[i] = 0;
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <reset_np_buffer+0x38>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
	for(int i =0; i<12; i++){
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3301      	adds	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b0b      	cmp	r3, #11
 8002714:	ddf4      	ble.n	8002700 <reset_np_buffer+0xc>
	}
	np_buffer.index = 1;
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <reset_np_buffer+0x38>)
 8002718:	2201      	movs	r2, #1
 800271a:	735a      	strb	r2, [r3, #13]
	in_range = 1;
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <reset_np_buffer+0x3c>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	200001f0 	.word	0x200001f0
 8002730:	2000020c 	.word	0x2000020c

08002734 <reset_voa_setting_buff>:

void reset_voa_setting_buff(void){
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	voa_settings.dec_place_value = 0;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <reset_voa_setting_buff+0x2c>)
 800273a:	2200      	movs	r2, #0
 800273c:	725a      	strb	r2, [r3, #9]
	voa_settings.dec_value = 0;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <reset_voa_setting_buff+0x2c>)
 8002740:	2200      	movs	r2, #0
 8002742:	729a      	strb	r2, [r3, #10]
	voa_settings.integer = 0;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <reset_voa_setting_buff+0x2c>)
 8002746:	2200      	movs	r2, #0
 8002748:	721a      	strb	r2, [r3, #8]
	voa_settings.action = none;
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <reset_voa_setting_buff+0x2c>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
	voa_settings.atten = 0;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <reset_voa_setting_buff+0x2c>)
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000200 	.word	0x20000200

08002764 <delete_num>:


void delete_num(void){
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
	uint8_t num = np_buffer.buff[np_buffer.index-1];
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <delete_num+0xe8>)
 800276c:	7b5b      	ldrb	r3, [r3, #13]
 800276e:	3b01      	subs	r3, #1
 8002770:	4a36      	ldr	r2, [pc, #216]	; (800284c <delete_num+0xe8>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	71fb      	strb	r3, [r7, #7]
	float temp = (float) num;
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe f98b 	bl	8000a94 <__aeabi_ui2f>
 800277e:	4603      	mov	r3, r0
 8002780:	60fb      	str	r3, [r7, #12]
	uint8_t decPlaceValue = voa_settings.dec_place_value;
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <delete_num+0xec>)
 8002784:	7a5b      	ldrb	r3, [r3, #9]
 8002786:	71bb      	strb	r3, [r7, #6]
	// code to delete num in voa_settings
	if(decPlaceValue == 0)		//deleted num is an integer
 8002788:	79bb      	ldrb	r3, [r7, #6]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <delete_num+0x6a>
	{
		voa_settings.integer = (voa_settings.integer - num) / 10.0;
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <delete_num+0xec>)
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	461a      	mov	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fe29 	bl	80003f0 <__aeabi_i2d>
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <delete_num+0xf0>)
 80027a4:	f7fd ffb8 	bl	8000718 <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f89a 	bl	80008e8 <__aeabi_d2uiz>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <delete_num+0xec>)
 80027ba:	721a      	strb	r2, [r3, #8]
		voa_settings.atten = (float)voa_settings.integer;
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <delete_num+0xec>)
 80027be:	7a1b      	ldrb	r3, [r3, #8]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe f967 	bl	8000a94 <__aeabi_ui2f>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <delete_num+0xec>)
 80027ca:	6053      	str	r3, [r2, #4]
 80027cc:	e026      	b.n	800281c <delete_num+0xb8>
	}
	else if(decPlaceValue == 1)							//delete num is decimal point
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d103      	bne.n	80027dc <delete_num+0x78>
	{
		voa_settings.dec_place_value = 0;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <delete_num+0xec>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	725a      	strb	r2, [r3, #9]
 80027da:	e01f      	b.n	800281c <delete_num+0xb8>
	}
	else
	{
		decPlaceValue = decPlaceValue-1;
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	3b01      	subs	r3, #1
 80027e0:	71bb      	strb	r3, [r7, #6]
		for(int i=0; i<decPlaceValue; i++)				// deleted num is a decimal
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	e008      	b.n	80027fa <delete_num+0x96>
		{
			temp = temp/10.0;
 80027e8:	491b      	ldr	r1, [pc, #108]	; (8002858 <delete_num+0xf4>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7fe fa5e 	bl	8000cac <__aeabi_fdiv>
 80027f0:	4603      	mov	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<decPlaceValue; i++)				// deleted num is a decimal
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3301      	adds	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	dbf2      	blt.n	80027e8 <delete_num+0x84>
		}
		voa_settings.atten =(float)voa_settings.atten - temp;
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <delete_num+0xec>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe f891 	bl	8000930 <__aeabi_fsub>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <delete_num+0xec>)
 8002814:	605a      	str	r2, [r3, #4]
		voa_settings.dec_place_value = decPlaceValue;
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <delete_num+0xec>)
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	7253      	strb	r3, [r2, #9]
	}

	//code to delete num in np_buffer
	np_buffer.index = np_buffer.index - 1;
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <delete_num+0xe8>)
 800281e:	7b5b      	ldrb	r3, [r3, #13]
 8002820:	3b01      	subs	r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <delete_num+0xe8>)
 8002826:	735a      	strb	r2, [r3, #13]
	np_buffer.buff[np_buffer.index] = 0;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <delete_num+0xe8>)
 800282a:	7b5b      	ldrb	r3, [r3, #13]
 800282c:	461a      	mov	r2, r3
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <delete_num+0xe8>)
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]
	if(np_buffer.index == 0)
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <delete_num+0xe8>)
 8002836:	7b5b      	ldrb	r3, [r3, #13]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <delete_num+0xde>
	{								  //if arr empty, set index=1 to display 0
		np_buffer.index = 1;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <delete_num+0xe8>)
 800283e:	2201      	movs	r2, #1
 8002840:	735a      	strb	r2, [r3, #13]
	}
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200001f0 	.word	0x200001f0
 8002850:	20000200 	.word	0x20000200
 8002854:	40240000 	.word	0x40240000
 8002858:	41200000 	.word	0x41200000

0800285c <set_min_atten>:

//void voa_query_request(void){
//	voa_settings.action = query;
//}

void set_min_atten(void){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	reset_np_buffer();
 8002860:	f7ff ff48 	bl	80026f4 <reset_np_buffer>
	reset_voa_setting_buff();
 8002864:	f7ff ff66 	bl	8002734 <reset_voa_setting_buff>
	add_to_buffer(MIN_VALUE);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff fe85 	bl	8002578 <add_to_buffer>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}

08002872 <set_max_atten>:

void set_max_atten(void){
 8002872:	b580      	push	{r7, lr}
 8002874:	af00      	add	r7, sp, #0
	reset_np_buffer();
 8002876:	f7ff ff3d 	bl	80026f4 <reset_np_buffer>
	reset_voa_setting_buff();
 800287a:	f7ff ff5b 	bl	8002734 <reset_voa_setting_buff>
	add_to_buffer(MAX_VALUE_TS_P1);
 800287e:	2003      	movs	r0, #3
 8002880:	f7ff fe7a 	bl	8002578 <add_to_buffer>
	add_to_buffer(MAX_VALUE_TS_P2);
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff fe77 	bl	8002578 <add_to_buffer>
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <number_pad_read>:
/**
  * @brief Intreprets number that's been pressed
  * @param None
  * @retval None
  */
NUM_PRESSED_TYPEDEF* number_pad_read(uint16_t GPIO_Pin){
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
	uint8_t number = undefined;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
	currentMillis = HAL_GetTick();
 800289e:	f000 fd6b 	bl	8003378 <HAL_GetTick>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4aae      	ldr	r2, [pc, #696]	; (8002b60 <number_pad_read+0x2d0>)
 80028a6:	6013      	str	r3, [r2, #0]
	  if (currentMillis - previousMillis > 10) {
 80028a8:	4bad      	ldr	r3, [pc, #692]	; (8002b60 <number_pad_read+0x2d0>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4bad      	ldr	r3, [pc, #692]	; (8002b64 <number_pad_read+0x2d4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	f240 8194 	bls.w	8002be0 <number_pad_read+0x350>

	//interpret button pressed
//	HAL_GPIO_DeInit(GPIOB, NP_INPUT_PIN1|NP_INPUT_PIN2|NP_INPUT_PIN3|NP_INPUT_PIN4);

	/*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
	GPIO_InitStructPrivate.Pin = NP_INPUT_PIN1|NP_INPUT_PIN2|NP_INPUT_PIN3|NP_INPUT_PIN4;
 80028b8:	4bab      	ldr	r3, [pc, #684]	; (8002b68 <number_pad_read+0x2d8>)
 80028ba:	f241 0283 	movw	r2, #4227	; 0x1083
 80028be:	601a      	str	r2, [r3, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80028c0:	4ba9      	ldr	r3, [pc, #676]	; (8002b68 <number_pad_read+0x2d8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80028c6:	4ba8      	ldr	r3, [pc, #672]	; (8002b68 <number_pad_read+0x2d8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	4ba6      	ldr	r3, [pc, #664]	; (8002b68 <number_pad_read+0x2d8>)
 80028ce:	2202      	movs	r2, #2
 80028d0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80028d2:	49a5      	ldr	r1, [pc, #660]	; (8002b68 <number_pad_read+0x2d8>)
 80028d4:	48a5      	ldr	r0, [pc, #660]	; (8002b6c <number_pad_read+0x2dc>)
 80028d6:	f001 f943 	bl	8003b60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(NP_OUTPUT_PORT1, NP_OUTPUT_PIN1, 1);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e0:	48a2      	ldr	r0, [pc, #648]	; (8002b6c <number_pad_read+0x2dc>)
 80028e2:	f001 fad0 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT2, NP_OUTPUT_PIN2, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ec:	489f      	ldr	r0, [pc, #636]	; (8002b6c <number_pad_read+0x2dc>)
 80028ee:	f001 faca 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT3, NP_OUTPUT_PIN3, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f8:	489c      	ldr	r0, [pc, #624]	; (8002b6c <number_pad_read+0x2dc>)
 80028fa:	f001 fac4 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT4, NP_OUTPUT_PIN4, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002904:	489a      	ldr	r0, [pc, #616]	; (8002b70 <number_pad_read+0x2e0>)
 8002906:	f001 fabe 	bl	8003e86 <HAL_GPIO_WritePin>
	if(GPIO_Pin == NP_INPUT_PIN1 && HAL_GPIO_ReadPin(NP_INPUT_PORT1, NP_INPUT_PIN1))
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d10c      	bne.n	800292a <number_pad_read+0x9a>
 8002910:	2102      	movs	r1, #2
 8002912:	4896      	ldr	r0, [pc, #600]	; (8002b6c <number_pad_read+0x2dc>)
 8002914:	f001 faa0 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <number_pad_read+0x9a>
	{
	  keyPressed = 1; //ASCII value of D
 800291e:	4b95      	ldr	r3, [pc, #596]	; (8002b74 <number_pad_read+0x2e4>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e030      	b.n	800298c <number_pad_read+0xfc>
	}
	else if(GPIO_Pin == NP_INPUT_PIN2 && HAL_GPIO_ReadPin(NP_INPUT_PORT2, NP_INPUT_PIN2))
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10c      	bne.n	800294a <number_pad_read+0xba>
 8002930:	2101      	movs	r1, #1
 8002932:	488e      	ldr	r0, [pc, #568]	; (8002b6c <number_pad_read+0x2dc>)
 8002934:	f001 fa90 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <number_pad_read+0xba>
	{
	  keyPressed = 2; //ASCII value of C
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <number_pad_read+0x2e4>)
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e020      	b.n	800298c <number_pad_read+0xfc>
	}
	else if(GPIO_Pin == NP_INPUT_PIN3 && HAL_GPIO_ReadPin(NP_INPUT_PORT3, NP_INPUT_PIN3))
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d10c      	bne.n	800296a <number_pad_read+0xda>
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	4886      	ldr	r0, [pc, #536]	; (8002b6c <number_pad_read+0x2dc>)
 8002954:	f001 fa80 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <number_pad_read+0xda>
	{
	  keyPressed = 3; //ASCII value of B
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <number_pad_read+0x2e4>)
 8002960:	2203      	movs	r2, #3
 8002962:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e010      	b.n	800298c <number_pad_read+0xfc>
	}
	else if(GPIO_Pin == NP_INPUT_PIN4 && HAL_GPIO_ReadPin(NP_INPUT_PORT4, NP_INPUT_PIN4))
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d10c      	bne.n	800298c <number_pad_read+0xfc>
 8002972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002976:	487d      	ldr	r0, [pc, #500]	; (8002b6c <number_pad_read+0x2dc>)
 8002978:	f001 fa6e 	bl	8003e58 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <number_pad_read+0xfc>
	{
	  keyPressed = 0xA; //ASCII value of A
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <number_pad_read+0x2e4>)
 8002984:	220a      	movs	r2, #10
 8002986:	701a      	strb	r2, [r3, #0]
	  number = min;
 8002988:	2306      	movs	r3, #6
 800298a:	73fb      	strb	r3, [r7, #15]
	}

	HAL_GPIO_WritePin(NP_OUTPUT_PORT1, NP_OUTPUT_PIN1, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002992:	4876      	ldr	r0, [pc, #472]	; (8002b6c <number_pad_read+0x2dc>)
 8002994:	f001 fa77 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT2, NP_OUTPUT_PIN2, 1);
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800299e:	4873      	ldr	r0, [pc, #460]	; (8002b6c <number_pad_read+0x2dc>)
 80029a0:	f001 fa71 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT3, NP_OUTPUT_PIN3, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029aa:	4870      	ldr	r0, [pc, #448]	; (8002b6c <number_pad_read+0x2dc>)
 80029ac:	f001 fa6b 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT4, NP_OUTPUT_PIN4, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b6:	486e      	ldr	r0, [pc, #440]	; (8002b70 <number_pad_read+0x2e0>)
 80029b8:	f001 fa65 	bl	8003e86 <HAL_GPIO_WritePin>
	if(GPIO_Pin == NP_INPUT_PIN1 && HAL_GPIO_ReadPin(NP_INPUT_PORT1, NP_INPUT_PIN1))
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d10c      	bne.n	80029dc <number_pad_read+0x14c>
 80029c2:	2102      	movs	r1, #2
 80029c4:	4869      	ldr	r0, [pc, #420]	; (8002b6c <number_pad_read+0x2dc>)
 80029c6:	f001 fa47 	bl	8003e58 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <number_pad_read+0x14c>
	{
	  keyPressed = 4; //ASCII value of D
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <number_pad_read+0x2e4>)
 80029d2:	2204      	movs	r2, #4
 80029d4:	701a      	strb	r2, [r3, #0]
	  number = num;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e030      	b.n	8002a3e <number_pad_read+0x1ae>
	}
	else if(GPIO_Pin == NP_INPUT_PIN2 && HAL_GPIO_ReadPin(NP_INPUT_PORT2, NP_INPUT_PIN2))
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10c      	bne.n	80029fc <number_pad_read+0x16c>
 80029e2:	2101      	movs	r1, #1
 80029e4:	4861      	ldr	r0, [pc, #388]	; (8002b6c <number_pad_read+0x2dc>)
 80029e6:	f001 fa37 	bl	8003e58 <HAL_GPIO_ReadPin>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <number_pad_read+0x16c>
	{
	  keyPressed = 5; //ASCII value of C
 80029f0:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <number_pad_read+0x2e4>)
 80029f2:	2205      	movs	r2, #5
 80029f4:	701a      	strb	r2, [r3, #0]
	  number = num;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e020      	b.n	8002a3e <number_pad_read+0x1ae>
	}
	else if(GPIO_Pin == NP_INPUT_PIN3 && HAL_GPIO_ReadPin(NP_INPUT_PORT3, NP_INPUT_PIN3))
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b80      	cmp	r3, #128	; 0x80
 8002a00:	d10c      	bne.n	8002a1c <number_pad_read+0x18c>
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	4859      	ldr	r0, [pc, #356]	; (8002b6c <number_pad_read+0x2dc>)
 8002a06:	f001 fa27 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <number_pad_read+0x18c>
	{
	  keyPressed = 6; //ASCII value of B
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <number_pad_read+0x2e4>)
 8002a12:	2206      	movs	r2, #6
 8002a14:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e010      	b.n	8002a3e <number_pad_read+0x1ae>
	}
	else if(GPIO_Pin == NP_INPUT_PIN4 && HAL_GPIO_ReadPin(NP_INPUT_PORT4, NP_INPUT_PIN4))
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d10c      	bne.n	8002a3e <number_pad_read+0x1ae>
 8002a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a28:	4850      	ldr	r0, [pc, #320]	; (8002b6c <number_pad_read+0x2dc>)
 8002a2a:	f001 fa15 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <number_pad_read+0x1ae>
	{
	  keyPressed = 0xB; //ASCII value of A
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <number_pad_read+0x2e4>)
 8002a36:	220b      	movs	r2, #11
 8002a38:	701a      	strb	r2, [r3, #0]
	  number = max;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	73fb      	strb	r3, [r7, #15]
	}

	HAL_GPIO_WritePin(NP_OUTPUT_PORT1, NP_OUTPUT_PIN1, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a44:	4849      	ldr	r0, [pc, #292]	; (8002b6c <number_pad_read+0x2dc>)
 8002a46:	f001 fa1e 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT2, NP_OUTPUT_PIN2, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a50:	4846      	ldr	r0, [pc, #280]	; (8002b6c <number_pad_read+0x2dc>)
 8002a52:	f001 fa18 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT3, NP_OUTPUT_PIN3, 1);
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5c:	4843      	ldr	r0, [pc, #268]	; (8002b6c <number_pad_read+0x2dc>)
 8002a5e:	f001 fa12 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT4, NP_OUTPUT_PIN4, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a68:	4841      	ldr	r0, [pc, #260]	; (8002b70 <number_pad_read+0x2e0>)
 8002a6a:	f001 fa0c 	bl	8003e86 <HAL_GPIO_WritePin>
	if(GPIO_Pin == NP_INPUT_PIN1 && HAL_GPIO_ReadPin(NP_INPUT_PORT1, NP_INPUT_PIN1))
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d10c      	bne.n	8002a8e <number_pad_read+0x1fe>
 8002a74:	2102      	movs	r1, #2
 8002a76:	483d      	ldr	r0, [pc, #244]	; (8002b6c <number_pad_read+0x2dc>)
 8002a78:	f001 f9ee 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <number_pad_read+0x1fe>
	{
	  keyPressed = 7; //ASCII value of D
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <number_pad_read+0x2e4>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e030      	b.n	8002af0 <number_pad_read+0x260>
	}
	else if(GPIO_Pin == NP_INPUT_PIN2 && HAL_GPIO_ReadPin(NP_INPUT_PORT2, NP_INPUT_PIN2))
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10c      	bne.n	8002aae <number_pad_read+0x21e>
 8002a94:	2101      	movs	r1, #1
 8002a96:	4835      	ldr	r0, [pc, #212]	; (8002b6c <number_pad_read+0x2dc>)
 8002a98:	f001 f9de 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <number_pad_read+0x21e>
	{
	  keyPressed = 8; //ASCII value of C
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <number_pad_read+0x2e4>)
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e020      	b.n	8002af0 <number_pad_read+0x260>
	}
	else if(GPIO_Pin == NP_INPUT_PIN3 && HAL_GPIO_ReadPin(NP_INPUT_PORT3, NP_INPUT_PIN3))
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d10c      	bne.n	8002ace <number_pad_read+0x23e>
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	482d      	ldr	r0, [pc, #180]	; (8002b6c <number_pad_read+0x2dc>)
 8002ab8:	f001 f9ce 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <number_pad_read+0x23e>
	{
	  keyPressed = 9; //ASCII value of B
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <number_pad_read+0x2e4>)
 8002ac4:	2209      	movs	r2, #9
 8002ac6:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e010      	b.n	8002af0 <number_pad_read+0x260>
	}
	else if(GPIO_Pin == NP_INPUT_PIN4 && HAL_GPIO_ReadPin(NP_INPUT_PORT4, NP_INPUT_PIN4))
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d10c      	bne.n	8002af0 <number_pad_read+0x260>
 8002ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ada:	4824      	ldr	r0, [pc, #144]	; (8002b6c <number_pad_read+0x2dc>)
 8002adc:	f001 f9bc 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <number_pad_read+0x260>
	{
	  keyPressed = 0xC; //ASCII value of A
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <number_pad_read+0x2e4>)
 8002ae8:	220c      	movs	r2, #12
 8002aea:	701a      	strb	r2, [r3, #0]
	  number = clear;
 8002aec:	2305      	movs	r3, #5
 8002aee:	73fb      	strb	r3, [r7, #15]
	}

	HAL_GPIO_WritePin(NP_OUTPUT_PORT1, NP_OUTPUT_PIN1, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af6:	481d      	ldr	r0, [pc, #116]	; (8002b6c <number_pad_read+0x2dc>)
 8002af8:	f001 f9c5 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT2, NP_OUTPUT_PIN2, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b02:	481a      	ldr	r0, [pc, #104]	; (8002b6c <number_pad_read+0x2dc>)
 8002b04:	f001 f9bf 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT3, NP_OUTPUT_PIN3, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0e:	4817      	ldr	r0, [pc, #92]	; (8002b6c <number_pad_read+0x2dc>)
 8002b10:	f001 f9b9 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NP_OUTPUT_PORT4, NP_OUTPUT_PIN4, 1);
 8002b14:	2201      	movs	r2, #1
 8002b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1a:	4815      	ldr	r0, [pc, #84]	; (8002b70 <number_pad_read+0x2e0>)
 8002b1c:	f001 f9b3 	bl	8003e86 <HAL_GPIO_WritePin>
	if(GPIO_Pin == NP_INPUT_PIN1 && HAL_GPIO_ReadPin(NP_INPUT_PORT1, NP_INPUT_PIN1))
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d10c      	bne.n	8002b40 <number_pad_read+0x2b0>
 8002b26:	2102      	movs	r1, #2
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <number_pad_read+0x2dc>)
 8002b2a:	f001 f995 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <number_pad_read+0x2b0>
	{
	  keyPressed = 0xE; //ASCII value of D
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <number_pad_read+0x2e4>)
 8002b36:	220e      	movs	r2, #14
 8002b38:	701a      	strb	r2, [r3, #0]
	  number = dec;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e03c      	b.n	8002bba <number_pad_read+0x32a>
	}
	else if(GPIO_Pin == NP_INPUT_PIN2 && HAL_GPIO_ReadPin(NP_INPUT_PORT2, NP_INPUT_PIN2))
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d118      	bne.n	8002b78 <number_pad_read+0x2e8>
 8002b46:	2101      	movs	r1, #1
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <number_pad_read+0x2dc>)
 8002b4a:	f001 f985 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d011      	beq.n	8002b78 <number_pad_read+0x2e8>
	{
	  keyPressed = 0; //ASCII value of C
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <number_pad_read+0x2e4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
	  number = num;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e02c      	b.n	8002bba <number_pad_read+0x32a>
 8002b60:	200001e8 	.word	0x200001e8
 8002b64:	200001e4 	.word	0x200001e4
 8002b68:	200001d0 	.word	0x200001d0
 8002b6c:	40010c00 	.word	0x40010c00
 8002b70:	40010800 	.word	0x40010800
 8002b74:	200001ec 	.word	0x200001ec
	}
	else if(GPIO_Pin == NP_INPUT_PIN3 && HAL_GPIO_ReadPin(NP_INPUT_PORT3, NP_INPUT_PIN3))
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d10c      	bne.n	8002b98 <number_pad_read+0x308>
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	482d      	ldr	r0, [pc, #180]	; (8002c38 <number_pad_read+0x3a8>)
 8002b82:	f001 f969 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <number_pad_read+0x308>
	{
	  keyPressed = 0xF; //ASCII value of B
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <number_pad_read+0x3ac>)
 8002b8e:	220f      	movs	r2, #15
 8002b90:	701a      	strb	r2, [r3, #0]
	  number = delete;
 8002b92:	2304      	movs	r3, #4
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e010      	b.n	8002bba <number_pad_read+0x32a>
	}
	else if(GPIO_Pin == NP_INPUT_PIN4 && HAL_GPIO_ReadPin(NP_INPUT_PORT4, NP_INPUT_PIN4))
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	d10c      	bne.n	8002bba <number_pad_read+0x32a>
 8002ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba4:	4824      	ldr	r0, [pc, #144]	; (8002c38 <number_pad_read+0x3a8>)
 8002ba6:	f001 f957 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <number_pad_read+0x32a>
	{
	  keyPressed = 0xD; //ASCII value of A
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <number_pad_read+0x3ac>)
 8002bb2:	220d      	movs	r2, #13
 8002bb4:	701a      	strb	r2, [r3, #0]
	  number = enter;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
	}
	GPIO_InitStructPrivate.Pin = NP_INPUT_PIN1|NP_INPUT_PIN2|NP_INPUT_PIN3|NP_INPUT_PIN4;
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <number_pad_read+0x3b0>)
 8002bbc:	f241 0283 	movw	r2, #4227	; 0x1083
 8002bc0:	601a      	str	r2, [r3, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <number_pad_read+0x3b0>)
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <number_pad_read+0x3b4>)
 8002bc6:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <number_pad_read+0x3b0>)
 8002bca:	2202      	movs	r2, #2
 8002bcc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002bce:	491c      	ldr	r1, [pc, #112]	; (8002c40 <number_pad_read+0x3b0>)
 8002bd0:	4819      	ldr	r0, [pc, #100]	; (8002c38 <number_pad_read+0x3a8>)
 8002bd2:	f000 ffc5 	bl	8003b60 <HAL_GPIO_Init>

	previousMillis = currentMillis;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <number_pad_read+0x3b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <number_pad_read+0x3bc>)
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e004      	b.n	8002bea <number_pad_read+0x35a>
  } else {
	  number = undefined;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
	  keyPressed = 0;
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <number_pad_read+0x3ac>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]

  }
  reset_np_press();
 8002bea:	f7ff fbfb 	bl	80023e4 <reset_np_press>
  HAL_GPIO_WritePin(NP_OUTPUT_PORT1, NP_OUTPUT_PIN1, 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf4:	4810      	ldr	r0, [pc, #64]	; (8002c38 <number_pad_read+0x3a8>)
 8002bf6:	f001 f946 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NP_OUTPUT_PORT2, NP_OUTPUT_PIN2, 1);
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <number_pad_read+0x3a8>)
 8002c02:	f001 f940 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NP_OUTPUT_PORT3, NP_OUTPUT_PIN3, 1);
 8002c06:	2201      	movs	r2, #1
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <number_pad_read+0x3a8>)
 8002c0e:	f001 f93a 	bl	8003e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NP_OUTPUT_PORT4, NP_OUTPUT_PIN4, 1);
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c18:	480d      	ldr	r0, [pc, #52]	; (8002c50 <number_pad_read+0x3c0>)
 8002c1a:	f001 f934 	bl	8003e86 <HAL_GPIO_WritePin>

//  NUM_PRESSED_TYPEDEF num_pressed;
  num_pressed.type = number;
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <number_pad_read+0x3c4>)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	7053      	strb	r3, [r2, #1]
  num_pressed.keyPressed = keyPressed;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <number_pad_read+0x3ac>)
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <number_pad_read+0x3c4>)
 8002c2a:	701a      	strb	r2, [r3, #0]
  return &num_pressed;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <number_pad_read+0x3c4>)

}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	200001ec 	.word	0x200001ec
 8002c40:	200001d0 	.word	0x200001d0
 8002c44:	10110000 	.word	0x10110000
 8002c48:	200001e8 	.word	0x200001e8
 8002c4c:	200001e4 	.word	0x200001e4
 8002c50:	40010800 	.word	0x40010800
 8002c54:	20000210 	.word	0x20000210

08002c58 <scheduler_open>:
/***************************************************************************//**
 * @brief
 *          Function opens the scheduler
 *
 ******************************************************************************/
void scheduler_open(void){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ();
 8002c5c:	f000 fcbb 	bl	80035d6 <HAL_NVIC_DisableIRQ>
  event_scheduled = 0;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <scheduler_open+0x18>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ();
 8002c66:	f000 fca8 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000214 	.word	0x20000214

08002c74 <add_scheduled_event>:
/***************************************************************************//**
 * @brief
 *          Function adds an event to the schedule
 *
 ******************************************************************************/
void add_scheduled_event(uint32_t event){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ();
 8002c7c:	f000 fcab 	bl	80035d6 <HAL_NVIC_DisableIRQ>
	event_scheduled |= event;
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <add_scheduled_event+0x24>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	4a03      	ldr	r2, [pc, #12]	; (8002c98 <add_scheduled_event+0x24>)
 8002c8a:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ();
 8002c8c:	f000 fc95 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000214 	.word	0x20000214

08002c9c <remove_scheduled_event>:
/***************************************************************************//**
 * @brief
 *          Function removes an event from the schedule
 *
 ******************************************************************************/
void remove_scheduled_event(uint32_t event){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ();
 8002ca4:	f000 fc97 	bl	80035d6 <HAL_NVIC_DisableIRQ>
	event_scheduled &= ~event;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <remove_scheduled_event+0x28>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <remove_scheduled_event+0x28>)
 8002cb4:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ();
 8002cb6:	f000 fc80 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000214 	.word	0x20000214

08002cc8 <get_scheduled_events>:
/***************************************************************************//**
 * @brief
 *          Function returns integer storing scheduled events
 *
 ******************************************************************************/
uint32_t get_scheduled_events(void){
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  //CORE_DECLARE_IRQ_STATE;
  //CORE_ENTER_CRITICAL();
  return event_scheduled;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <get_scheduled_events+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
  //CORE_EXIT_CRITICAL();
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000214 	.word	0x20000214

08002cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_MspInit+0x40>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_MspInit+0x40>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6193      	str	r3, [r2, #24]
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_MspInit+0x40>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_MspInit+0x40>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <HAL_MspInit+0x40>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_MspInit+0x40>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_I2C_MspInit+0xb4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d144      	bne.n	8002dca <HAL_I2C_MspInit+0xaa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5e:	2312      	movs	r3, #18
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	481a      	ldr	r0, [pc, #104]	; (8002ddc <HAL_I2C_MspInit+0xbc>)
 8002d72:	f000 fef5 	bl	8003b60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_I2C_MspInit+0xc0>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_I2C_MspInit+0xc0>)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d9c:	61d3      	str	r3, [r2, #28]
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_I2C_MspInit+0xb8>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	201f      	movs	r0, #31
 8002db0:	f000 fbe7 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002db4:	201f      	movs	r0, #31
 8002db6:	f000 fc00 	bl	80035ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2020      	movs	r0, #32
 8002dc0:	f000 fbdf 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002dc4:	2020      	movs	r0, #32
 8002dc6:	f000 fbf8 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010c00 	.word	0x40010c00
 8002de0:	40010000 	.word	0x40010000

08002de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_UART_MspInit+0xd4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d155      	bne.n	8002eb0 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0e:	61d3      	str	r3, [r2, #28]
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_UART_MspInit+0xd8>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e34:	2304      	movs	r3, #4
 8002e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	481e      	ldr	r0, [pc, #120]	; (8002ec0 <HAL_UART_MspInit+0xdc>)
 8002e48:	f000 fe8a 	bl	8003b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4818      	ldr	r0, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0xdc>)
 8002e60:	f000 fe7e 	bl	8003b60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_UART_MspInit+0xe4>)
 8002e68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002e96:	f000 fbb9 	bl	800360c <HAL_DMA_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002ea0:	f7ff fb64 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eaa:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_UART_MspInit+0xe0>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	200000f8 	.word	0x200000f8
 8002ec8:	4002006c 	.word	0x4002006c

08002ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <NMI_Handler+0x4>

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f12:	f000 fa1f 	bl	8003354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f000 ffca 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f000 ffc3 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f000 ffbc 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <DMA1_Channel6_IRQHandler+0x10>)
 8002f4a:	f000 fcc9 	bl	80038e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200000f8 	.word	0x200000f8

08002f58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f5c:	2080      	movs	r0, #128	; 0x80
 8002f5e:	f000 ffab 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <I2C1_EV_IRQHandler+0x10>)
 8002f6e:	f001 fc5d 	bl	800482c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000224 	.word	0x20000224

08002f7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <I2C1_ER_IRQHandler+0x10>)
 8002f82:	f001 fdc4 	bl	8004b0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000224 	.word	0x20000224

08002f90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <USART2_IRQHandler+0x10>)
 8002f96:	f004 f973 	bl	8007280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200000b4 	.word	0x200000b4

08002fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fac:	f000 ff84 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fc6:	4a14      	ldr	r2, [pc, #80]	; (8003018 <MX_I2C1_Init+0x58>)
 8002fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fd0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fe0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fe4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_I2C1_Init+0x54>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_I2C1_Init+0x54>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <MX_I2C1_Init+0x54>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_I2C1_Init+0x54>)
 8003000:	f000 ff72 	bl	8003ee8 <HAL_I2C_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800300a:	f7ff faaf 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000224 	.word	0x20000224
 8003018:	40005400 	.word	0x40005400

0800301c <voa_comm_init>:

void voa_comm_init(void){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8003020:	f7ff ffce 	bl	8002fc0 <MX_I2C1_Init>
	i2c_data.size = 0;
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <voa_comm_init+0x1c>)
 8003026:	2200      	movs	r2, #0
 8003028:	72da      	strb	r2, [r3, #11]
	reset_buffer();
 800302a:	f000 f809 	bl	8003040 <reset_buffer>
	setting_voa_check = done;
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <voa_comm_init+0x20>)
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000218 	.word	0x20000218
 800303c:	20000278 	.word	0x20000278

08003040 <reset_buffer>:

void reset_buffer(void){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
	for(int i=0; i<BUFFER_LENGTH; i++){
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	e00e      	b.n	800306a <reset_buffer+0x2a>
	  i2c_data.send[i] = 0;
 800304c:	4a0b      	ldr	r2, [pc, #44]	; (800307c <reset_buffer+0x3c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	3301      	adds	r3, #1
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
	  i2c_data.receive[i] = 0;
 8003058:	4a08      	ldr	r2, [pc, #32]	; (800307c <reset_buffer+0x3c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	3306      	adds	r3, #6
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<BUFFER_LENGTH; i++){
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3301      	adds	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b04      	cmp	r3, #4
 800306e:	dded      	ble.n	800304c <reset_buffer+0xc>
	}
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000218 	.word	0x20000218

08003080 <voa_busy>:
  query_attenuation();
  set_attenuation(15);
    query_attenuation();
}

void voa_busy(void){
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	if(setting_voa_check == set){
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <voa_busy+0x3c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <voa_busy+0x14>
		setting_voa_check = flagged;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <voa_busy+0x3c>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
		setting_voa_check = done;
	} else if(setting_voa_check == done){
		setting_voa_check = aardvark_started;
		add_scheduled_event(AARDVARK_CB);
	}
}
 8003092:	e011      	b.n	80030b8 <voa_busy+0x38>
	} else if (setting_voa_check == flagged){
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <voa_busy+0x3c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d103      	bne.n	80030a4 <voa_busy+0x24>
		setting_voa_check = done;
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <voa_busy+0x3c>)
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
}
 80030a2:	e009      	b.n	80030b8 <voa_busy+0x38>
	} else if(setting_voa_check == done){
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <voa_busy+0x3c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d105      	bne.n	80030b8 <voa_busy+0x38>
		setting_voa_check = aardvark_started;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <voa_busy+0x3c>)
 80030ae:	2203      	movs	r2, #3
 80030b0:	701a      	strb	r2, [r3, #0]
		add_scheduled_event(AARDVARK_CB);
 80030b2:	2008      	movs	r0, #8
 80030b4:	f7ff fdde 	bl	8002c74 <add_scheduled_event>
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000278 	.word	0x20000278

080030c0 <set_attenuation>:

	//wait til line not busy, then query VOA

}

void set_attenuation(float dB){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	reset_buffer();
 80030c8:	f7ff ffba 	bl	8003040 <reset_buffer>
	uint32_t value = (int)(dB * 100);
 80030cc:	491c      	ldr	r1, [pc, #112]	; (8003140 <set_attenuation+0x80>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fd38 	bl	8000b44 <__aeabi_fmul>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fe84 	bl	8000de4 <__aeabi_f2iz>
 80030dc:	4603      	mov	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
	i2c_data.received = dB;
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fd fea5 	bl	8000e30 <__aeabi_f2uiz>
 80030e6:	4603      	mov	r3, r0
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <set_attenuation+0x84>)
 80030ec:	701a      	strb	r2, [r3, #0]
	if(value & (0xFFFF0000)){
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <set_attenuation+0x3c>
		//out of range, tell touchscreen
		Error_Handler();
 80030f8:	f7ff fa38 	bl	800256c <Error_Handler>
	}
	i2c_data.send[0] = 0x80;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <set_attenuation+0x84>)
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	705a      	strb	r2, [r3, #1]
	i2c_data.send[1] = (value & (0xFF00)) >> 8;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <set_attenuation+0x84>)
 800310a:	709a      	strb	r2, [r3, #2]
	i2c_data.send[2] = value & (0xFF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <set_attenuation+0x84>)
 8003112:	70da      	strb	r2, [r3, #3]
	recent_atten = i2c_data.send[2];
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <set_attenuation+0x84>)
 8003116:	78da      	ldrb	r2, [r3, #3]
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <set_attenuation+0x88>)
 800311a:	701a      	strb	r2, [r3, #0]
	i2c_data.size = 3;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <set_attenuation+0x84>)
 800311e:	2203      	movs	r2, #3
 8003120:	72da      	strb	r2, [r3, #11]
	setting_voa_check = set;
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <set_attenuation+0x8c>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
	i2c_transmit(VOA_1_ADDR, i2c_data.send, i2c_data.size,STOP_TRUE);
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <set_attenuation+0x84>)
 800312a:	7ada      	ldrb	r2, [r3, #11]
 800312c:	2301      	movs	r3, #1
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <set_attenuation+0x90>)
 8003130:	20c8      	movs	r0, #200	; 0xc8
 8003132:	f000 f839 	bl	80031a8 <i2c_transmit>
	return;
 8003136:	bf00      	nop
}
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	42c80000 	.word	0x42c80000
 8003144:	20000218 	.word	0x20000218
 8003148:	20000279 	.word	0x20000279
 800314c:	20000278 	.word	0x20000278
 8003150:	20000219 	.word	0x20000219

08003154 <query_attenuation>:

float query_attenuation(void){
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	float dB;
	reset_buffer();
 8003158:	f7ff ff72 	bl	8003040 <reset_buffer>
	i2c_data.send[0] = 0x81;
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <query_attenuation+0x48>)
 800315e:	2281      	movs	r2, #129	; 0x81
 8003160:	705a      	strb	r2, [r3, #1]
	i2c_data.size = 1;
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <query_attenuation+0x48>)
 8003164:	2201      	movs	r2, #1
 8003166:	72da      	strb	r2, [r3, #11]
	i2c_transmit(VOA_1_ADDR, i2c_data.send, i2c_data.size,STOP_TRUE);
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <query_attenuation+0x48>)
 800316a:	7ada      	ldrb	r2, [r3, #11]
 800316c:	2301      	movs	r3, #1
 800316e:	490c      	ldr	r1, [pc, #48]	; (80031a0 <query_attenuation+0x4c>)
 8003170:	20c8      	movs	r0, #200	; 0xc8
 8003172:	f000 f819 	bl	80031a8 <i2c_transmit>
	i2c_data.size = 2;
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <query_attenuation+0x48>)
 8003178:	2202      	movs	r2, #2
 800317a:	72da      	strb	r2, [r3, #11]
	i2c_receive(VOA_1_ADDR, i2c_data.receive, i2c_data.size);
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <query_attenuation+0x48>)
 800317e:	7adb      	ldrb	r3, [r3, #11]
 8003180:	461a      	mov	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <query_attenuation+0x50>)
 8003184:	20c8      	movs	r0, #200	; 0xc8
 8003186:	f000 f835 	bl	80031f4 <i2c_receive>
//	dB = (float)((i2c_data.receive[0] << 8) | i2c_data.receive[1]);
//	dB = dB / 100.0;
	return i2c_data.receive[1];
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <query_attenuation+0x48>)
 800318c:	79db      	ldrb	r3, [r3, #7]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fc80 	bl	8000a94 <__aeabi_ui2f>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000218 	.word	0x20000218
 80031a0:	20000219 	.word	0x20000219
 80031a4:	2000021e 	.word	0x2000021e

080031a8 <i2c_transmit>:

void device_id(void){
	return;
}

void i2c_transmit(uint8_t address, uint8_t *send_data, uint8_t size, uint8_t stop_true){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6039      	str	r1, [r7, #0]
 80031b0:	4611      	mov	r1, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
 80031b8:	460b      	mov	r3, r1
 80031ba:	71bb      	strb	r3, [r7, #6]
 80031bc:	4613      	mov	r3, r2
 80031be:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef to_slave;
	char error;
//	HAL_NVIC_DisableIRQ(EXTI2_IRQn);

	to_slave = HAL_I2C_Master_Transmit(&hi2c1,address,i2c_data.send,size,HAL_MAX_DELAY);
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	b299      	uxth	r1, r3
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	9200      	str	r2, [sp, #0]
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <i2c_transmit+0x44>)
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <i2c_transmit+0x48>)
 80031d2:	f000 ffcd 	bl	8004170 <HAL_I2C_Master_Transmit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
//	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
	//check proper write
	if(to_slave != HAL_OK) {
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <i2c_transmit+0x3c>
		//throw error
//		Error_Handler();
		error = 1;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73bb      	strb	r3, [r7, #14]
	}
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000219 	.word	0x20000219
 80031f0:	20000224 	.word	0x20000224

080031f4 <i2c_receive>:

void i2c_receive(uint8_t address, uint8_t *data, uint8_t size){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	4603      	mov	r3, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	71fb      	strb	r3, [r7, #7]
 8003200:	4613      	mov	r3, r2
 8003202:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef from_slave;
	uint8_t r_data[12];
	for(int i=0; i<12; i++){
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e008      	b.n	800321c <i2c_receive+0x28>
	  r_data[i] = 0;
 800320a:	f107 0208 	add.w	r2, r7, #8
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<12; i++){
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0b      	cmp	r3, #11
 8003220:	ddf3      	ble.n	800320a <i2c_receive+0x16>
	}
	char error;
//	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
	from_slave = HAL_I2C_Master_Receive(&hi2c1,address,r_data,size,HAL_MAX_DELAY);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	b299      	uxth	r1, r3
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f107 0208 	add.w	r2, r7, #8
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	9000      	str	r0, [sp, #0]
 8003234:	480f      	ldr	r0, [pc, #60]	; (8003274 <i2c_receive+0x80>)
 8003236:	f001 f899 	bl	800436c <HAL_I2C_Master_Receive>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]
	//compare expected receive results
	if(from_slave != HAL_OK) {
		//throw error
//		Error_Handler();
	}
	for(int i=0; i<size; i++){
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e00d      	b.n	8003260 <i2c_receive+0x6c>
		i2c_data.receive[i] = r_data[i];
 8003244:	f107 0208 	add.w	r2, r7, #8
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	7819      	ldrb	r1, [r3, #0]
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <i2c_receive+0x84>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	3306      	adds	r3, #6
 8003256:	460a      	mov	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3301      	adds	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	79bb      	ldrb	r3, [r7, #6]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	429a      	cmp	r2, r3
 8003266:	dbed      	blt.n	8003244 <i2c_receive+0x50>
	}
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000224 	.word	0x20000224
 8003278:	20000218 	.word	0x20000218

0800327c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800327e:	490d      	ldr	r1, [pc, #52]	; (80032b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003294:	4c0a      	ldr	r4, [pc, #40]	; (80032c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032a2:	f7ff fe87 	bl	8002fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f004 fd0d 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032aa:	f7ff f8a7 	bl	80023fc <main>
  bx lr
 80032ae:	4770      	bx	lr
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80032b8:	08007dec 	.word	0x08007dec
  ldr r2, =_sbss
 80032bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80032c0:	20000280 	.word	0x20000280

080032c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC1_2_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_Init+0x28>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_Init+0x28>)
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d8:	2003      	movs	r0, #3
 80032da:	f000 f947 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032de:	200f      	movs	r0, #15
 80032e0:	f000 f808 	bl	80032f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e4:	f7ff fcfa 	bl	8002cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000

080032f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x54>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_InitTick+0x58>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330a:	fbb3 f3f1 	udiv	r3, r3, r1
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f96d 	bl	80035f2 <HAL_SYSTICK_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00e      	b.n	8003340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d80a      	bhi.n	800333e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003328:	2200      	movs	r2, #0
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f000 f927 	bl	8003582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <HAL_InitTick+0x5c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000000 	.word	0x20000000
 800334c:	20000008 	.word	0x20000008
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_IncTick+0x1c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_IncTick+0x20>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4413      	add	r3, r2
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_IncTick+0x20>)
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	20000008 	.word	0x20000008
 8003374:	2000027c 	.word	0x2000027c

08003378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return uwTick;
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <HAL_GetTick+0x10>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	2000027c 	.word	0x2000027c

0800338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033be:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60d3      	str	r3, [r2, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <__NVIC_EnableIRQ+0x34>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db12      	blt.n	8003460 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	490a      	ldr	r1, [pc, #40]	; (800346c <__NVIC_DisableIRQ+0x44>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	3320      	adds	r3, #32
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003454:	f3bf 8f4f 	dsb	sy
}
 8003458:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800345a:	f3bf 8f6f 	isb	sy
}
 800345e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff90 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff09 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff1e 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff90 	bl	80034c4 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5f 	bl	8003470 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff11 	bl	80033f0 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff1f 	bl	8003428 <__NVIC_DisableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff94 	bl	8003528 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e043      	b.n	80036aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_DMA_Init+0xa8>)
 800362a:	4413      	add	r3, r2
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_DMA_Init+0xac>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_DMA_Init+0xb0>)
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003656:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800365a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	bffdfff8 	.word	0xbffdfff8
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	40020000 	.word	0x40020000

080036c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Start_IT+0x20>
 80036dc:	2302      	movs	r3, #2
 80036de:	e04a      	b.n	8003776 <HAL_DMA_Start_IT+0xb6>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d13a      	bne.n	8003768 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9f4 	bl	8003b04 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 020e 	orr.w	r2, r2, #14
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e00f      	b.n	8003756 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0204 	bic.w	r2, r2, #4
 8003744:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 020a 	orr.w	r2, r2, #10
 8003754:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e005      	b.n	8003774 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003790:	2b02      	cmp	r3, #2
 8003792:	d008      	beq.n	80037a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e020      	b.n	80037e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 020e 	bic.w	r2, r2, #14
 80037b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003806:	2b02      	cmp	r3, #2
 8003808:	d005      	beq.n	8003816 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	e051      	b.n	80038ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 020e 	bic.w	r2, r2, #14
 8003824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMA_Abort_IT+0xd0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d029      	beq.n	8003894 <HAL_DMA_Abort_IT+0xa0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_DMA_Abort_IT+0xd4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d022      	beq.n	8003890 <HAL_DMA_Abort_IT+0x9c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_DMA_Abort_IT+0xd8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d01a      	beq.n	800388a <HAL_DMA_Abort_IT+0x96>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_DMA_Abort_IT+0xdc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d012      	beq.n	8003884 <HAL_DMA_Abort_IT+0x90>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_DMA_Abort_IT+0xe0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00a      	beq.n	800387e <HAL_DMA_Abort_IT+0x8a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_DMA_Abort_IT+0xe4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d102      	bne.n	8003878 <HAL_DMA_Abort_IT+0x84>
 8003872:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003876:	e00e      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 8003878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800387c:	e00b      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 800387e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003882:	e008      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	e005      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 800388a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388e:	e002      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 8003890:	2310      	movs	r3, #16
 8003892:	e000      	b.n	8003896 <HAL_DMA_Abort_IT+0xa2>
 8003894:	2301      	movs	r3, #1
 8003896:	4a11      	ldr	r2, [pc, #68]	; (80038dc <HAL_DMA_Abort_IT+0xe8>)
 8003898:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
    } 
  }
  return status;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020008 	.word	0x40020008
 80038c8:	4002001c 	.word	0x4002001c
 80038cc:	40020030 	.word	0x40020030
 80038d0:	40020044 	.word	0x40020044
 80038d4:	40020058 	.word	0x40020058
 80038d8:	4002006c 	.word	0x4002006c
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2204      	movs	r2, #4
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d04f      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xc8>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04a      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a66      	ldr	r2, [pc, #408]	; (8003ad0 <HAL_DMA_IRQHandler+0x1f0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d029      	beq.n	800398e <HAL_DMA_IRQHandler+0xae>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_DMA_IRQHandler+0x1f4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMA_IRQHandler+0xaa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a63      	ldr	r2, [pc, #396]	; (8003ad8 <HAL_DMA_IRQHandler+0x1f8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01a      	beq.n	8003984 <HAL_DMA_IRQHandler+0xa4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a62      	ldr	r2, [pc, #392]	; (8003adc <HAL_DMA_IRQHandler+0x1fc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d012      	beq.n	800397e <HAL_DMA_IRQHandler+0x9e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a60      	ldr	r2, [pc, #384]	; (8003ae0 <HAL_DMA_IRQHandler+0x200>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00a      	beq.n	8003978 <HAL_DMA_IRQHandler+0x98>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5f      	ldr	r2, [pc, #380]	; (8003ae4 <HAL_DMA_IRQHandler+0x204>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d102      	bne.n	8003972 <HAL_DMA_IRQHandler+0x92>
 800396c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003970:	e00e      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 8003972:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003976:	e00b      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 8003978:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800397c:	e008      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 800397e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003982:	e005      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 8003984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003988:	e002      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	e000      	b.n	8003990 <HAL_DMA_IRQHandler+0xb0>
 800398e:	2304      	movs	r3, #4
 8003990:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <HAL_DMA_IRQHandler+0x208>)
 8003992:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8094 	beq.w	8003ac6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039a6:	e08e      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2202      	movs	r2, #2
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d056      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x186>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d051      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 020a 	bic.w	r2, r2, #10
 80039de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <HAL_DMA_IRQHandler+0x1f0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d029      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x166>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a37      	ldr	r2, [pc, #220]	; (8003ad4 <HAL_DMA_IRQHandler+0x1f4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x162>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a35      	ldr	r2, [pc, #212]	; (8003ad8 <HAL_DMA_IRQHandler+0x1f8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01a      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x15c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <HAL_DMA_IRQHandler+0x1fc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d012      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x156>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <HAL_DMA_IRQHandler+0x200>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00a      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x150>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_DMA_IRQHandler+0x204>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d102      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x14a>
 8003a24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a28:	e00e      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2e:	e00b      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a34:	e008      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3a:	e005      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a40:	e002      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a42:	2320      	movs	r3, #32
 8003a44:	e000      	b.n	8003a48 <HAL_DMA_IRQHandler+0x168>
 8003a46:	2302      	movs	r3, #2
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <HAL_DMA_IRQHandler+0x208>)
 8003a4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d034      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a64:	e02f      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d028      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x1e8>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d023      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020e 	bic.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
    }
  }
  return;
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
}
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40020008 	.word	0x40020008
 8003ad4:	4002001c 	.word	0x4002001c
 8003ad8:	40020030 	.word	0x40020030
 8003adc:	40020044 	.word	0x40020044
 8003ae0:	40020058 	.word	0x40020058
 8003ae4:	4002006c 	.word	0x4002006c
 8003ae8:	40020000 	.word	0x40020000

08003aec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d108      	bne.n	8003b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b42:	e007      	b.n	8003b54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	60da      	str	r2, [r3, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b08b      	sub	sp, #44	; 0x2c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b72:	e161      	b.n	8003e38 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b74:	2201      	movs	r2, #1
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 8150 	bne.w	8003e32 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a97      	ldr	r2, [pc, #604]	; (8003df4 <HAL_GPIO_Init+0x294>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d05e      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003b9c:	4a95      	ldr	r2, [pc, #596]	; (8003df4 <HAL_GPIO_Init+0x294>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d875      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003ba2:	4a95      	ldr	r2, [pc, #596]	; (8003df8 <HAL_GPIO_Init+0x298>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d058      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003ba8:	4a93      	ldr	r2, [pc, #588]	; (8003df8 <HAL_GPIO_Init+0x298>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d86f      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bae:	4a93      	ldr	r2, [pc, #588]	; (8003dfc <HAL_GPIO_Init+0x29c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d052      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bb4:	4a91      	ldr	r2, [pc, #580]	; (8003dfc <HAL_GPIO_Init+0x29c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d869      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bba:	4a91      	ldr	r2, [pc, #580]	; (8003e00 <HAL_GPIO_Init+0x2a0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04c      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bc0:	4a8f      	ldr	r2, [pc, #572]	; (8003e00 <HAL_GPIO_Init+0x2a0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d863      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bc6:	4a8f      	ldr	r2, [pc, #572]	; (8003e04 <HAL_GPIO_Init+0x2a4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d046      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bcc:	4a8d      	ldr	r2, [pc, #564]	; (8003e04 <HAL_GPIO_Init+0x2a4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d85d      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bd2:	2b12      	cmp	r3, #18
 8003bd4:	d82a      	bhi.n	8003c2c <HAL_GPIO_Init+0xcc>
 8003bd6:	2b12      	cmp	r3, #18
 8003bd8:	d859      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <HAL_GPIO_Init+0x80>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c5b 	.word	0x08003c5b
 8003be4:	08003c35 	.word	0x08003c35
 8003be8:	08003c47 	.word	0x08003c47
 8003bec:	08003c89 	.word	0x08003c89
 8003bf0:	08003c8f 	.word	0x08003c8f
 8003bf4:	08003c8f 	.word	0x08003c8f
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003c8f 	.word	0x08003c8f
 8003c00:	08003c8f 	.word	0x08003c8f
 8003c04:	08003c8f 	.word	0x08003c8f
 8003c08:	08003c8f 	.word	0x08003c8f
 8003c0c:	08003c8f 	.word	0x08003c8f
 8003c10:	08003c8f 	.word	0x08003c8f
 8003c14:	08003c8f 	.word	0x08003c8f
 8003c18:	08003c8f 	.word	0x08003c8f
 8003c1c:	08003c8f 	.word	0x08003c8f
 8003c20:	08003c8f 	.word	0x08003c8f
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c51 	.word	0x08003c51
 8003c2c:	4a76      	ldr	r2, [pc, #472]	; (8003e08 <HAL_GPIO_Init+0x2a8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c32:	e02c      	b.n	8003c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	623b      	str	r3, [r7, #32]
          break;
 8003c3a:	e029      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	3304      	adds	r3, #4
 8003c42:	623b      	str	r3, [r7, #32]
          break;
 8003c44:	e024      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	623b      	str	r3, [r7, #32]
          break;
 8003c4e:	e01f      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	330c      	adds	r3, #12
 8003c56:	623b      	str	r3, [r7, #32]
          break;
 8003c58:	e01a      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c62:	2304      	movs	r3, #4
 8003c64:	623b      	str	r3, [r7, #32]
          break;
 8003c66:	e013      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c70:	2308      	movs	r3, #8
 8003c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	611a      	str	r2, [r3, #16]
          break;
 8003c7a:	e009      	b.n	8003c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	615a      	str	r2, [r3, #20]
          break;
 8003c86:	e003      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
          break;
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          break;
 8003c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2bff      	cmp	r3, #255	; 0xff
 8003c94:	d801      	bhi.n	8003c9a <HAL_GPIO_Init+0x13a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	e001      	b.n	8003c9e <HAL_GPIO_Init+0x13e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2bff      	cmp	r3, #255	; 0xff
 8003ca4:	d802      	bhi.n	8003cac <HAL_GPIO_Init+0x14c>
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	e002      	b.n	8003cb2 <HAL_GPIO_Init+0x152>
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	3b08      	subs	r3, #8
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	210f      	movs	r1, #15
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a9 	beq.w	8003e32 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_GPIO_Init+0x2ac>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	4a49      	ldr	r2, [pc, #292]	; (8003e0c <HAL_GPIO_Init+0x2ac>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6193      	str	r3, [r2, #24]
 8003cec:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_GPIO_Init+0x2ac>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cf8:	4a45      	ldr	r2, [pc, #276]	; (8003e10 <HAL_GPIO_Init+0x2b0>)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <HAL_GPIO_Init+0x2b4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00d      	beq.n	8003d40 <HAL_GPIO_Init+0x1e0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <HAL_GPIO_Init+0x2b8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <HAL_GPIO_Init+0x1dc>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_GPIO_Init+0x2bc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_GPIO_Init+0x1d8>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e004      	b.n	8003d42 <HAL_GPIO_Init+0x1e2>
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e002      	b.n	8003d42 <HAL_GPIO_Init+0x1e2>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_GPIO_Init+0x1e2>
 8003d40:	2300      	movs	r3, #0
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	f002 0203 	and.w	r2, r2, #3
 8003d48:	0092      	lsls	r2, r2, #2
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d52:	492f      	ldr	r1, [pc, #188]	; (8003e10 <HAL_GPIO_Init+0x2b0>)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	492b      	ldr	r1, [pc, #172]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e006      	b.n	8003d88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	4927      	ldr	r1, [pc, #156]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4921      	ldr	r1, [pc, #132]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
 8003da0:	e006      	b.n	8003db0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	491d      	ldr	r1, [pc, #116]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4917      	ldr	r1, [pc, #92]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]
 8003dc8:	e006      	b.n	8003dd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	4913      	ldr	r1, [pc, #76]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01f      	beq.n	8003e24 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	490d      	ldr	r1, [pc, #52]	; (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
 8003df0:	e01f      	b.n	8003e32 <HAL_GPIO_Init+0x2d2>
 8003df2:	bf00      	nop
 8003df4:	10320000 	.word	0x10320000
 8003df8:	10310000 	.word	0x10310000
 8003dfc:	10220000 	.word	0x10220000
 8003e00:	10210000 	.word	0x10210000
 8003e04:	10120000 	.word	0x10120000
 8003e08:	10110000 	.word	0x10110000
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010800 	.word	0x40010800
 8003e18:	40010c00 	.word	0x40010c00
 8003e1c:	40011000 	.word	0x40011000
 8003e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_GPIO_Init+0x2f4>)
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	4909      	ldr	r1, [pc, #36]	; (8003e54 <HAL_GPIO_Init+0x2f4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f47f ae96 	bne.w	8003b74 <HAL_GPIO_Init+0x14>
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	372c      	adds	r7, #44	; 0x2c
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	40010400 	.word	0x40010400

08003e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e001      	b.n	8003e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
 8003e92:	4613      	mov	r3, r2
 8003e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e96:	787b      	ldrb	r3, [r7, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ea2:	e003      	b.n	8003eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	041a      	lsls	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	611a      	str	r2, [r3, #16]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f99e 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e12b      	b.n	8004152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe ff06 	bl	8002d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f003 f842 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 8003f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a81      	ldr	r2, [pc, #516]	; (800415c <HAL_I2C_Init+0x274>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d807      	bhi.n	8003f6c <HAL_I2C_Init+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_I2C_Init+0x278>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e006      	b.n	8003f7a <HAL_I2C_Init+0x92>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_I2C_Init+0x27c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bf94      	ite	ls
 8003f74:	2301      	movls	r3, #1
 8003f76:	2300      	movhi	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0e7      	b.n	8004152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a78      	ldr	r2, [pc, #480]	; (8004168 <HAL_I2C_Init+0x280>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_I2C_Init+0x274>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d802      	bhi.n	8003fbc <HAL_I2C_Init+0xd4>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	e009      	b.n	8003fd0 <HAL_I2C_Init+0xe8>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_I2C_Init+0x284>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	495c      	ldr	r1, [pc, #368]	; (800415c <HAL_I2C_Init+0x274>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d819      	bhi.n	8004024 <HAL_I2C_Init+0x13c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e59      	subs	r1, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004004:	400b      	ands	r3, r1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_I2C_Init+0x138>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e59      	subs	r1, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb1 f3f3 	udiv	r3, r1, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	e051      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004020:	2304      	movs	r3, #4
 8004022:	e04f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d111      	bne.n	8004050 <HAL_I2C_Init+0x168>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e58      	subs	r0, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e012      	b.n	8004076 <HAL_I2C_Init+0x18e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1e58      	subs	r0, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	0099      	lsls	r1, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x196>
 800407a:	2301      	movs	r3, #1
 800407c:	e022      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_I2C_Init+0x1bc>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e58      	subs	r0, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	440b      	add	r3, r1
 8004094:	fbb0 f3f3 	udiv	r3, r0, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	e00f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	0099      	lsls	r1, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	6809      	ldr	r1, [r1, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6911      	ldr	r1, [r2, #16]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	000186a0 	.word	0x000186a0
 8004160:	001e847f 	.word	0x001e847f
 8004164:	003d08ff 	.word	0x003d08ff
 8004168:	431bde83 	.word	0x431bde83
 800416c:	10624dd3 	.word	0x10624dd3

08004170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	461a      	mov	r2, r3
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
 8004180:	4613      	mov	r3, r2
 8004182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7ff f8f8 	bl	8003378 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 80e0 	bne.w	8004358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2319      	movs	r3, #25
 800419e:	2201      	movs	r2, #1
 80041a0:	4970      	ldr	r1, [pc, #448]	; (8004364 <HAL_I2C_Master_Transmit+0x1f4>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f002 f91a 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0d3      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x50>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0cc      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d007      	beq.n	80041e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2221      	movs	r2, #33	; 0x21
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2210      	movs	r2, #16
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	893a      	ldrh	r2, [r7, #8]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a50      	ldr	r2, [pc, #320]	; (8004368 <HAL_I2C_Master_Transmit+0x1f8>)
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f001 fedc 	bl	8005fec <I2C_MasterRequestWrite>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e08d      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004254:	e066      	b.n	8004324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6a39      	ldr	r1, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f002 f994 	bl	8006588 <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d11b      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x188>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f002 f984 	bl	800660a <I2C_WaitOnBTFFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e01a      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d194      	bne.n	8004256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	00100002 	.word	0x00100002
 8004368:	ffff0000 	.word	0xffff0000

0800436c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
 800437c:	4613      	mov	r3, r2
 800437e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fe fff8 	bl	8003378 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 823f 	bne.w	8004816 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2319      	movs	r3, #25
 800439e:	2201      	movs	r2, #1
 80043a0:	497f      	ldr	r1, [pc, #508]	; (80045a0 <HAL_I2C_Master_Receive+0x234>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f002 f81a 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e232      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2C_Master_Receive+0x54>
 80043bc:	2302      	movs	r3, #2
 80043be:	e22b      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2222      	movs	r2, #34	; 0x22
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	893a      	ldrh	r2, [r7, #8]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_I2C_Master_Receive+0x238>)
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f001 fe5e 	bl	80060f0 <I2C_MasterRequestRead>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e1ec      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d113      	bne.n	800446e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e1c0      	b.n	80047f0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11e      	bne.n	80044b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004486:	b672      	cpsid	i
}
 8004488:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044b0:	b662      	cpsie	i
}
 80044b2:	e035      	b.n	8004520 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11e      	bne.n	80044fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044cc:	b672      	cpsid	i
}
 80044ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044f6:	b662      	cpsie	i
}
 80044f8:	e012      	b.n	8004520 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004520:	e166      	b.n	80047f0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	2b03      	cmp	r3, #3
 8004528:	f200 811f 	bhi.w	800476a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	2b01      	cmp	r3, #1
 8004532:	d123      	bne.n	800457c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f002 f8d9 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e167      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800457a:	e139      	b.n	80047f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b02      	cmp	r3, #2
 8004582:	d152      	bne.n	800462a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	2200      	movs	r2, #0
 800458c:	4906      	ldr	r1, [pc, #24]	; (80045a8 <HAL_I2C_Master_Receive+0x23c>)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f001 ff24 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e13c      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
 800459e:	bf00      	nop
 80045a0:	00100002 	.word	0x00100002
 80045a4:	ffff0000 	.word	0xffff0000
 80045a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045ac:	b672      	cpsid	i
}
 80045ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045f2:	b662      	cpsie	i
}
 80045f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004628:	e0e2      	b.n	80047f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	2200      	movs	r2, #0
 8004632:	497b      	ldr	r1, [pc, #492]	; (8004820 <HAL_I2C_Master_Receive+0x4b4>)
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f001 fed1 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0e9      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004652:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004654:	b672      	cpsid	i
}
 8004656:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800468a:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_I2C_Master_Receive+0x4b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	4a65      	ldr	r2, [pc, #404]	; (8004828 <HAL_I2C_Master_Receive+0x4bc>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0a1a      	lsrs	r2, r3, #8
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00da      	lsls	r2, r3, #3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d118      	bne.n	80046e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046d2:	b662      	cpsie	i
}
 80046d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e09a      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d1d9      	bne.n	80046a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004732:	b662      	cpsie	i
}
 8004734:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004768:	e042      	b.n	80047f0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 ffbe 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e04c      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d118      	bne.n	80047f0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f ae94 	bne.w	8004522 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	00010004 	.word	0x00010004
 8004824:	20000000 	.word	0x20000000
 8004828:	14f8b589 	.word	0x14f8b589

0800482c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b10      	cmp	r3, #16
 800485a:	d003      	beq.n	8004864 <HAL_I2C_EV_IRQHandler+0x38>
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	f040 80c1 	bne.w	80049e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_I2C_EV_IRQHandler+0x6e>
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004884:	d003      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x62>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800488c:	d101      	bne.n	8004892 <HAL_I2C_EV_IRQHandler+0x66>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x68>
 8004892:	2300      	movs	r3, #0
 8004894:	2b01      	cmp	r3, #1
 8004896:	f000 8132 	beq.w	8004afe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x92>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	0a5b      	lsrs	r3, r3, #9
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 ffa1 	bl	80067f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fd77 	bl	80053aa <I2C_Master_SB>
 80048bc:	e092      	b.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0xb2>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	0a5b      	lsrs	r3, r3, #9
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fdec 	bl	80054b4 <I2C_Master_ADD10>
 80048dc:	e082      	b.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_I2C_EV_IRQHandler+0xd2>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	0a5b      	lsrs	r3, r3, #9
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fe05 	bl	8005506 <I2C_Master_ADDR>
 80048fc:	e072      	b.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03b      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004918:	f000 80f3 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	09db      	lsrs	r3, r3, #7
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00f      	beq.n	8004948 <HAL_I2C_EV_IRQHandler+0x11c>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	0a9b      	lsrs	r3, r3, #10
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_I2C_EV_IRQHandler+0x11c>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9f1 	bl	8004d28 <I2C_MasterTransmit_TXE>
 8004946:	e04d      	b.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80d6 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	0a5b      	lsrs	r3, r3, #9
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80cf 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	2b21      	cmp	r3, #33	; 0x21
 8004968:	d103      	bne.n	8004972 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa78 	bl	8004e60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004970:	e0c7      	b.n	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	f040 80c4 	bne.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fae6 	bl	8004f4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004980:	e0bf      	b.n	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004990:	f000 80b7 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00f      	beq.n	80049c0 <HAL_I2C_EV_IRQHandler+0x194>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0a9b      	lsrs	r3, r3, #10
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_I2C_EV_IRQHandler+0x194>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb5b 	bl	8005074 <I2C_MasterReceive_RXNE>
 80049be:	e011      	b.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 809a 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8093 	beq.w	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fbfa 	bl	80051d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e2:	e08e      	b.n	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049e4:	e08d      	b.n	8004b02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	e007      	b.n	8004a08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <HAL_I2C_EV_IRQHandler+0x20e>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	0a5b      	lsrs	r3, r3, #9
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a30:	69b9      	ldr	r1, [r7, #24]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 ffbe 	bl	80059b4 <I2C_Slave_ADDR>
 8004a38:	e066      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_I2C_EV_IRQHandler+0x22e>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0a5b      	lsrs	r3, r3, #9
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fff8 	bl	8005a48 <I2C_Slave_STOPF>
 8004a58:	e056      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	2b21      	cmp	r3, #33	; 0x21
 8004a5e:	d002      	beq.n	8004a66 <HAL_I2C_EV_IRQHandler+0x23a>
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b29      	cmp	r3, #41	; 0x29
 8004a64:	d125      	bne.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00f      	beq.n	8004a92 <HAL_I2C_EV_IRQHandler+0x266>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	0a9b      	lsrs	r3, r3, #10
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_I2C_EV_IRQHandler+0x266>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fed6 	bl	800583c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a90:	e039      	b.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d033      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2da>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	0a5b      	lsrs	r3, r3, #9
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d02d      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 ff03 	bl	80058b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ab0:	e029      	b.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00f      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0a9b      	lsrs	r3, r3, #10
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 ff0d 	bl	80058f6 <I2C_SlaveReceive_RXNE>
 8004adc:	e014      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00e      	beq.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	0a5b      	lsrs	r3, r3, #9
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 ff3b 	bl	8005972 <I2C_SlaveReceive_BTF>
 8004afc:	e004      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08a      	sub	sp, #40	; 0x28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0x5e>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b5a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	0a5b      	lsrs	r3, r3, #9
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <HAL_I2C_ER_IRQHandler+0x88>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	f043 0302 	orr.w	r3, r3, #2
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	0a9b      	lsrs	r3, r3, #10
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d03f      	beq.n	8004c22 <HAL_I2C_ER_IRQHandler+0x114>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d039      	beq.n	8004c22 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004bae:	7efb      	ldrb	r3, [r7, #27]
 8004bb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004bc8:	7ebb      	ldrb	r3, [r7, #26]
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d112      	bne.n	8004bf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b21      	cmp	r3, #33	; 0x21
 8004bd8:	d008      	beq.n	8004bec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b29      	cmp	r3, #41	; 0x29
 8004bde:	d005      	beq.n	8004bec <HAL_I2C_ER_IRQHandler+0xde>
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b28      	cmp	r3, #40	; 0x28
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b21      	cmp	r3, #33	; 0x21
 8004bea:	d103      	bne.n	8004bf4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 f85b 	bl	8005ca8 <I2C_Slave_AF>
 8004bf2:	e016      	b.n	8004c22 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c06:	7efb      	ldrb	r3, [r7, #27]
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d002      	beq.n	8004c12 <HAL_I2C_ER_IRQHandler+0x104>
 8004c0c:	7efb      	ldrb	r3, [r7, #27]
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d107      	bne.n	8004c22 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	0adb      	lsrs	r3, r3, #11
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <HAL_I2C_ER_IRQHandler+0x13e>
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 f892 	bl	8005d88 <I2C_ITError>
  }
}
 8004c64:	bf00      	nop
 8004c66:	3728      	adds	r7, #40	; 0x28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d150      	bne.n	8004df0 <I2C_MasterTransmit_TXE+0xc8>
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b21      	cmp	r3, #33	; 0x21
 8004d52:	d14d      	bne.n	8004df0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d01d      	beq.n	8004d96 <I2C_MasterTransmit_TXE+0x6e>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d01a      	beq.n	8004d96 <I2C_MasterTransmit_TXE+0x6e>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d66:	d016      	beq.n	8004d96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2211      	movs	r2, #17
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff6c 	bl	8004c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d94:	e060      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d107      	bne.n	8004de0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff ff81 	bl	8004ce0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dde:	e03b      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff3f 	bl	8004c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dee:	e033      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b21      	cmp	r3, #33	; 0x21
 8004df4:	d005      	beq.n	8004e02 <I2C_MasterTransmit_TXE+0xda>
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d12d      	bne.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b22      	cmp	r3, #34	; 0x22
 8004e00:	d12a      	bne.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e1c:	e01c      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d103      	bne.n	8004e32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f88e 	bl	8004f4c <I2C_MemoryTransmit_TXE_BTF>
}
 8004e30:	e012      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e56:	e7ff      	b.n	8004e58 <I2C_MasterTransmit_TXE+0x130>
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b21      	cmp	r3, #33	; 0x21
 8004e78:	d164      	bne.n	8004f44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d012      	beq.n	8004eaa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ea8:	e04c      	b.n	8004f44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d01d      	beq.n	8004eec <I2C_MasterTransmit_BTF+0x8c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d01a      	beq.n	8004eec <I2C_MasterTransmit_BTF+0x8c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ebc:	d016      	beq.n	8004eec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ecc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2211      	movs	r2, #17
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fec1 	bl	8004c6c <HAL_I2C_MasterTxCpltCallback>
}
 8004eea:	e02b      	b.n	8004f44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004efa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d107      	bne.n	8004f36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fed6 	bl	8004ce0 <HAL_I2C_MemTxCpltCallback>
}
 8004f34:	e006      	b.n	8004f44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe94 	bl	8004c6c <HAL_I2C_MasterTxCpltCallback>
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11d      	bne.n	8004fa0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10b      	bne.n	8004f84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f82:	e073      	b.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	121b      	asrs	r3, r3, #8
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f9e:	e065      	b.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10b      	bne.n	8004fc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fbe:	e055      	b.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d151      	bne.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b22      	cmp	r3, #34	; 0x22
 8004fcc:	d10d      	bne.n	8004fea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fe8:	e040      	b.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d015      	beq.n	8005020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b21      	cmp	r3, #33	; 0x21
 8004ff8:	d112      	bne.n	8005020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800501e:	e025      	b.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d120      	bne.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b21      	cmp	r3, #33	; 0x21
 800502e:	d11d      	bne.n	800506c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800503e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe3a 	bl	8004ce0 <HAL_I2C_MemTxCpltCallback>
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b22      	cmp	r3, #34	; 0x22
 8005086:	f040 80a2 	bne.w	80051ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d921      	bls.n	80050dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	f040 8082 	bne.w	80051ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80050da:	e078      	b.n	80051ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d074      	beq.n	80051ce <I2C_MasterReceive_RXNE+0x15a>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d002      	beq.n	80050f0 <I2C_MasterReceive_RXNE+0x7c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d16e      	bne.n	80051ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f001 facb 	bl	800668c <I2C_WaitOnSTOPRequestThroughIT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d142      	bne.n	8005182 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800511a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d10a      	bne.n	800516c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fdc4 	bl	8004cf2 <HAL_I2C_MemRxCpltCallback>
}
 800516a:	e030      	b.n	80051ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2212      	movs	r2, #18
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fd7f 	bl	8004c7e <HAL_I2C_MasterRxCpltCallback>
}
 8005180:	e025      	b.n	80051ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005190:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fd9b 	bl	8004d04 <HAL_I2C_ErrorCallback>
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d11b      	bne.n	8005226 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005224:	e0bd      	b.n	80053a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b03      	cmp	r3, #3
 800522e:	d129      	bne.n	8005284 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d00a      	beq.n	800525c <I2C_MasterReceive_BTF+0x86>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d007      	beq.n	800525c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005282:	e08e      	b.n	80053a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d176      	bne.n	800537c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d002      	beq.n	800529a <I2C_MasterReceive_BTF+0xc4>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d108      	bne.n	80052ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e019      	b.n	80052e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d002      	beq.n	80052b8 <I2C_MasterReceive_BTF+0xe2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d108      	bne.n	80052ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e00a      	b.n	80052e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d007      	beq.n	80052e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800533a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d10a      	bne.n	8005366 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fcc7 	bl	8004cf2 <HAL_I2C_MemRxCpltCallback>
}
 8005364:	e01d      	b.n	80053a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2212      	movs	r2, #18
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fc82 	bl	8004c7e <HAL_I2C_MasterRxCpltCallback>
}
 800537a:	e012      	b.n	80053a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d117      	bne.n	80053ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80053d8:	e067      	b.n	80054aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]
}
 80053ec:	e05d      	b.n	80054aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f6:	d133      	bne.n	8005460 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b21      	cmp	r3, #33	; 0x21
 8005402:	d109      	bne.n	8005418 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005414:	611a      	str	r2, [r3, #16]
 8005416:	e008      	b.n	800542a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <I2C_Master_SB+0x92>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d108      	bne.n	800544e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d032      	beq.n	80054aa <I2C_Master_SB+0x100>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02d      	beq.n	80054aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545c:	605a      	str	r2, [r3, #4]
}
 800545e:	e024      	b.n	80054aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10e      	bne.n	8005486 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	b29b      	uxth	r3, r3
 800546e:	11db      	asrs	r3, r3, #7
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f063 030f 	orn	r3, r3, #15
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
}
 8005484:	e011      	b.n	80054aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10d      	bne.n	80054aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	b29b      	uxth	r3, r3
 8005494:	11db      	asrs	r3, r3, #7
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 0306 	and.w	r3, r3, #6
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f063 030e 	orn	r3, r3, #14
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	611a      	str	r2, [r3, #16]
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <I2C_Master_ADD10+0x26>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <I2C_Master_ADD10+0x48>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fa:	605a      	str	r2, [r3, #4]
  }
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005506:	b480      	push	{r7}
 8005508:	b091      	sub	sp, #68	; 0x44
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005514:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b22      	cmp	r3, #34	; 0x22
 800552e:	f040 8174 	bne.w	800581a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <I2C_Master_ADDR+0x54>
 800553a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d10b      	bne.n	800555a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005542:	2300      	movs	r3, #0
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	633b      	str	r3, [r7, #48]	; 0x30
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	633b      	str	r3, [r7, #48]	; 0x30
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	e16b      	b.n	8005832 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11d      	bne.n	800559e <I2C_Master_ADDR+0x98>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800556a:	d118      	bne.n	800559e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005590:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	651a      	str	r2, [r3, #80]	; 0x50
 800559c:	e149      	b.n	8005832 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d113      	bne.n	80055d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a8:	2300      	movs	r3, #0
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e120      	b.n	8005812 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	f040 808a 	bne.w	80056f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055e2:	d137      	bne.n	8005654 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005602:	d113      	bne.n	800562c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005612:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	e0f2      	b.n	8005812 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e0de      	b.n	8005812 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	2b08      	cmp	r3, #8
 8005658:	d02e      	beq.n	80056b8 <I2C_Master_ADDR+0x1b2>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b20      	cmp	r3, #32
 800565e:	d02b      	beq.n	80056b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	2b12      	cmp	r3, #18
 8005664:	d102      	bne.n	800566c <I2C_Master_ADDR+0x166>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b01      	cmp	r3, #1
 800566a:	d125      	bne.n	80056b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b04      	cmp	r3, #4
 8005670:	d00e      	beq.n	8005690 <I2C_Master_ADDR+0x18a>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b02      	cmp	r3, #2
 8005676:	d00b      	beq.n	8005690 <I2C_Master_ADDR+0x18a>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b10      	cmp	r3, #16
 800567c:	d008      	beq.n	8005690 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e007      	b.n	80056a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	e0ac      	b.n	8005812 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e090      	b.n	8005812 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d158      	bne.n	80057ac <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d021      	beq.n	8005744 <I2C_Master_ADDR+0x23e>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b02      	cmp	r3, #2
 8005704:	d01e      	beq.n	8005744 <I2C_Master_ADDR+0x23e>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b10      	cmp	r3, #16
 800570a:	d01b      	beq.n	8005744 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e012      	b.n	800576a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005752:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	d14b      	bne.n	8005812 <I2C_Master_ADDR+0x30c>
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005780:	d00b      	beq.n	800579a <I2C_Master_ADDR+0x294>
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b01      	cmp	r3, #1
 8005786:	d008      	beq.n	800579a <I2C_Master_ADDR+0x294>
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	2b08      	cmp	r3, #8
 800578c:	d005      	beq.n	800579a <I2C_Master_ADDR+0x294>
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2b10      	cmp	r3, #16
 8005792:	d002      	beq.n	800579a <I2C_Master_ADDR+0x294>
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	2b20      	cmp	r3, #32
 8005798:	d13b      	bne.n	8005812 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	e032      	b.n	8005812 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ca:	d117      	bne.n	80057fc <I2C_Master_ADDR+0x2f6>
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057d2:	d00b      	beq.n	80057ec <I2C_Master_ADDR+0x2e6>
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d008      	beq.n	80057ec <I2C_Master_ADDR+0x2e6>
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d005      	beq.n	80057ec <I2C_Master_ADDR+0x2e6>
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d002      	beq.n	80057ec <I2C_Master_ADDR+0x2e6>
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d107      	bne.n	80057fc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005818:	e00b      	b.n	8005832 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
}
 8005830:	e7ff      	b.n	8005832 <I2C_Master_ADDR+0x32c>
 8005832:	bf00      	nop
 8005834:	3744      	adds	r7, #68	; 0x44
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02b      	beq.n	80058ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d114      	bne.n	80058ae <I2C_SlaveTransmit_TXE+0x72>
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b29      	cmp	r3, #41	; 0x29
 8005888:	d111      	bne.n	80058ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005898:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2221      	movs	r2, #33	; 0x21
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2228      	movs	r2, #40	; 0x28
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff f9f1 	bl	8004c90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d011      	beq.n	80058ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02c      	beq.n	800596a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d114      	bne.n	800596a <I2C_SlaveReceive_RXNE+0x74>
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b2a      	cmp	r3, #42	; 0x2a
 8005944:	d111      	bne.n	800596a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005954:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2222      	movs	r2, #34	; 0x22
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2228      	movs	r2, #40	; 0x28
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f99c 	bl	8004ca2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800596a:	bf00      	nop
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d012      	beq.n	80059aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ce:	2b28      	cmp	r3, #40	; 0x28
 80059d0:	d127      	bne.n	8005a22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	09db      	lsrs	r3, r3, #7
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	81bb      	strh	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a14:	89ba      	ldrh	r2, [r7, #12]
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff f94a 	bl	8004cb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a20:	e00e      	b.n	8005a40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d172      	bne.n	8005b8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b22      	cmp	r3, #34	; 0x22
 8005aaa:	d002      	beq.n	8005ab2 <I2C_Slave_STOPF+0x6a>
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab0:	d135      	bne.n	8005b1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0204 	orr.w	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fffe 	bl	8003aec <HAL_DMA_GetState>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d049      	beq.n	8005b8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	4a69      	ldr	r2, [pc, #420]	; (8005ca0 <I2C_Slave_STOPF+0x258>)
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fe76 	bl	80037f4 <HAL_DMA_Abort_IT>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03d      	beq.n	8005b8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b1c:	e035      	b.n	8005b8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd ffc8 	bl	8003aec <HAL_DMA_GetState>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d014      	beq.n	8005b8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	4a4e      	ldr	r2, [pc, #312]	; (8005ca0 <I2C_Slave_STOPF+0x258>)
 8005b68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd fe40 	bl	80037f4 <HAL_DMA_Abort_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	e000      	b.n	8005b8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03e      	beq.n	8005c14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d112      	bne.n	8005bca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d112      	bne.n	8005bfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8b3 	bl	8005d88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c22:	e039      	b.n	8005c98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b2a      	cmp	r3, #42	; 0x2a
 8005c28:	d109      	bne.n	8005c3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2228      	movs	r2, #40	; 0x28
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff f832 	bl	8004ca2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b28      	cmp	r3, #40	; 0x28
 8005c48:	d111      	bne.n	8005c6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <I2C_Slave_STOPF+0x25c>)
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff f831 	bl	8004cce <HAL_I2C_ListenCpltCallback>
}
 8005c6c:	e014      	b.n	8005c98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	2b22      	cmp	r3, #34	; 0x22
 8005c74:	d002      	beq.n	8005c7c <I2C_Slave_STOPF+0x234>
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d10d      	bne.n	8005c98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff f805 	bl	8004ca2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0800628d 	.word	0x0800628d
 8005ca4:	ffff0000 	.word	0xffff0000

08005ca8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d002      	beq.n	8005cca <I2C_Slave_AF+0x22>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d129      	bne.n	8005d1e <I2C_Slave_AF+0x76>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b28      	cmp	r3, #40	; 0x28
 8005cce:	d126      	bne.n	8005d1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <I2C_Slave_AF+0xdc>)
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe ffd9 	bl	8004cce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005d1c:	e02e      	b.n	8005d7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d126      	bne.n	8005d72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <I2C_Slave_AF+0xdc>)
 8005d28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2221      	movs	r2, #33	; 0x21
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fe ff90 	bl	8004c90 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d70:	e004      	b.n	8005d7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d7a:	615a      	str	r2, [r3, #20]
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	ffff0000 	.word	0xffff0000

08005d88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d002      	beq.n	8005dac <I2C_ITError+0x24>
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d10a      	bne.n	8005dc2 <I2C_ITError+0x3a>
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b22      	cmp	r3, #34	; 0x22
 8005db0:	d107      	bne.n	8005dc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dc8:	2b28      	cmp	r3, #40	; 0x28
 8005dca:	d107      	bne.n	8005ddc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2228      	movs	r2, #40	; 0x28
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dda:	e015      	b.n	8005e08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dea:	d00a      	beq.n	8005e02 <I2C_ITError+0x7a>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b60      	cmp	r3, #96	; 0x60
 8005df0:	d007      	beq.n	8005e02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d161      	bne.n	8005edc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d020      	beq.n	8005e76 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	4a6a      	ldr	r2, [pc, #424]	; (8005fe4 <I2C_ITError+0x25c>)
 8005e3a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd fcd7 	bl	80037f4 <HAL_DMA_Abort_IT>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8089 	beq.w	8005f60 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e70:	4610      	mov	r0, r2
 8005e72:	4798      	blx	r3
 8005e74:	e074      	b.n	8005f60 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	4a5a      	ldr	r2, [pc, #360]	; (8005fe4 <I2C_ITError+0x25c>)
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd fcb6 	bl	80037f4 <HAL_DMA_Abort_IT>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d068      	beq.n	8005f60 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d10b      	bne.n	8005eb4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4798      	blx	r3
 8005eda:	e041      	b.n	8005f60 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b60      	cmp	r3, #96	; 0x60
 8005ee6:	d125      	bne.n	8005f34 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d10b      	bne.n	8005f1c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fe fef2 	bl	8004d16 <HAL_I2C_AbortCpltCallback>
 8005f32:	e015      	b.n	8005f60 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d10b      	bne.n	8005f5a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fe fed2 	bl	8004d04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10e      	bne.n	8005f8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d113      	bne.n	8005fda <I2C_ITError+0x252>
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b28      	cmp	r3, #40	; 0x28
 8005fb6:	d110      	bne.n	8005fda <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <I2C_ITError+0x260>)
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fe fe7a 	bl	8004cce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	0800628d 	.word	0x0800628d
 8005fe8:	ffff0000 	.word	0xffff0000

08005fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d006      	beq.n	8006016 <I2C_MasterRequestWrite+0x2a>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d003      	beq.n	8006016 <I2C_MasterRequestWrite+0x2a>
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006014:	d108      	bne.n	8006028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e00b      	b.n	8006040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	2b12      	cmp	r3, #18
 800602e:	d107      	bne.n	8006040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f9c5 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006066:	d103      	bne.n	8006070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e035      	b.n	80060e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607c:	d108      	bne.n	8006090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800607e:	897b      	ldrh	r3, [r7, #10]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800608c:	611a      	str	r2, [r3, #16]
 800608e:	e01b      	b.n	80060c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006090:	897b      	ldrh	r3, [r7, #10]
 8006092:	11db      	asrs	r3, r3, #7
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f063 030f 	orn	r3, r3, #15
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	490e      	ldr	r1, [pc, #56]	; (80060e8 <I2C_MasterRequestWrite+0xfc>)
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f9eb 	bl	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e010      	b.n	80060e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060be:	897b      	ldrh	r3, [r7, #10]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4907      	ldr	r1, [pc, #28]	; (80060ec <I2C_MasterRequestWrite+0x100>)
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f9db 	bl	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	00010008 	.word	0x00010008
 80060ec:	00010002 	.word	0x00010002

080060f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	460b      	mov	r3, r1
 80060fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006114:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d006      	beq.n	800612a <I2C_MasterRequestRead+0x3a>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d003      	beq.n	800612a <I2C_MasterRequestRead+0x3a>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006128:	d108      	bne.n	800613c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e00b      	b.n	8006154 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	2b11      	cmp	r3, #17
 8006142:	d107      	bne.n	8006154 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f93b 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	d103      	bne.n	8006184 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e079      	b.n	800627c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006190:	d108      	bne.n	80061a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	611a      	str	r2, [r3, #16]
 80061a2:	e05f      	b.n	8006264 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061a4:	897b      	ldrh	r3, [r7, #10]
 80061a6:	11db      	asrs	r3, r3, #7
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f063 030f 	orn	r3, r3, #15
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	4930      	ldr	r1, [pc, #192]	; (8006284 <I2C_MasterRequestRead+0x194>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f961 	bl	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e054      	b.n	800627c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061d2:	897b      	ldrh	r3, [r7, #10]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4929      	ldr	r1, [pc, #164]	; (8006288 <I2C_MasterRequestRead+0x198>)
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f951 	bl	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e044      	b.n	800627c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006216:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f8d9 	bl	80063dc <I2C_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623e:	d103      	bne.n	8006248 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e017      	b.n	800627c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800624c:	897b      	ldrh	r3, [r7, #10]
 800624e:	11db      	asrs	r3, r3, #7
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0306 	and.w	r3, r3, #6
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f063 030e 	orn	r3, r3, #14
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4907      	ldr	r1, [pc, #28]	; (8006288 <I2C_MasterRequestRead+0x198>)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f90d 	bl	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	00010008 	.word	0x00010008
 8006288:	00010002 	.word	0x00010002

0800628c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062a6:	4b4b      	ldr	r3, [pc, #300]	; (80063d4 <I2C_DMAAbort+0x148>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	08db      	lsrs	r3, r3, #3
 80062ac:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <I2C_DMAAbort+0x14c>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	0a1a      	lsrs	r2, r3, #8
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00da      	lsls	r2, r3, #3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80062d2:	e00a      	b.n	80062ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e8:	d0ea      	beq.n	80062c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	2200      	movs	r2, #0
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	2200      	movs	r2, #0
 8006308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	2200      	movs	r2, #0
 800632e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	2200      	movs	r2, #0
 800633e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b60      	cmp	r3, #96	; 0x60
 800635a:	d10e      	bne.n	800637a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7fe fccf 	bl	8004d16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006378:	e027      	b.n	80063ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006380:	2b28      	cmp	r3, #40	; 0x28
 8006382:	d117      	bne.n	80063b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2228      	movs	r2, #40	; 0x28
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063b2:	e007      	b.n	80063c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063c4:	6978      	ldr	r0, [r7, #20]
 80063c6:	f7fe fc9d 	bl	8004d04 <HAL_I2C_ErrorCallback>
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000000 	.word	0x20000000
 80063d8:	14f8b589 	.word	0x14f8b589

080063dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063ec:	e025      	b.n	800643a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d021      	beq.n	800643a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fc ffbf 	bl	8003378 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d116      	bne.n	800643a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e023      	b.n	8006482 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	0c1b      	lsrs	r3, r3, #16
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10d      	bne.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	43da      	mvns	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	e00c      	b.n	800647a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	43da      	mvns	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4013      	ands	r3, r2
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d0b6      	beq.n	80063ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006498:	e051      	b.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d123      	bne.n	80064f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e046      	b.n	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d021      	beq.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fa:	f7fc ff3d 	bl	8003378 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d302      	bcc.n	8006510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d116      	bne.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e020      	b.n	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10c      	bne.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	43da      	mvns	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4013      	ands	r3, r2
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2301      	movne	r3, #1
 800655c:	2300      	moveq	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	e00b      	b.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	43da      	mvns	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d18d      	bne.n	800649a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006594:	e02d      	b.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f900 	bl	800679c <I2C_IsAcknowledgeFailed>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e02d      	b.n	8006602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d021      	beq.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fc fee3 	bl	8003378 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d116      	bne.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e007      	b.n	8006602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d1ca      	bne.n	8006596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006616:	e02d      	b.n	8006674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f8bf 	bl	800679c <I2C_IsAcknowledgeFailed>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e02d      	b.n	8006684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d021      	beq.n	8006674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006630:	f7fc fea2 	bl	8003378 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e007      	b.n	8006684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d1ca      	bne.n	8006618 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006698:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	08db      	lsrs	r3, r3, #3
 800669e:	4a13      	ldr	r2, [pc, #76]	; (80066ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	0a1a      	lsrs	r2, r3, #8
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d107      	bne.n	80066ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e008      	b.n	80066dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d8:	d0e9      	beq.n	80066ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000000 	.word	0x20000000
 80066ec:	14f8b589 	.word	0x14f8b589

080066f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066fc:	e042      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d119      	bne.n	8006740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0210 	mvn.w	r2, #16
 8006714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e029      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006740:	f7fc fe1a 	bl	8003378 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d116      	bne.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e007      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d1b5      	bne.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d11b      	bne.n	80067ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 0204 	orr.w	r2, r3, #4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006808:	d103      	bne.n	8006812 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006810:	e007      	b.n	8006822 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800681a:	d102      	bne.n	8006822 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2208      	movs	r2, #8
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e272      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8087 	beq.w	800695a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800684c:	4b92      	ldr	r3, [pc, #584]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 030c 	and.w	r3, r3, #12
 8006854:	2b04      	cmp	r3, #4
 8006856:	d00c      	beq.n	8006872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006858:	4b8f      	ldr	r3, [pc, #572]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b08      	cmp	r3, #8
 8006862:	d112      	bne.n	800688a <HAL_RCC_OscConfig+0x5e>
 8006864:	4b8c      	ldr	r3, [pc, #560]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006870:	d10b      	bne.n	800688a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006872:	4b89      	ldr	r3, [pc, #548]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d06c      	beq.n	8006958 <HAL_RCC_OscConfig+0x12c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d168      	bne.n	8006958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e24c      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006892:	d106      	bne.n	80068a2 <HAL_RCC_OscConfig+0x76>
 8006894:	4b80      	ldr	r3, [pc, #512]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7f      	ldr	r2, [pc, #508]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 800689a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	e02e      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x98>
 80068aa:	4b7b      	ldr	r3, [pc, #492]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a7a      	ldr	r2, [pc, #488]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4b78      	ldr	r3, [pc, #480]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a77      	ldr	r2, [pc, #476]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e01d      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068cc:	d10c      	bne.n	80068e8 <HAL_RCC_OscConfig+0xbc>
 80068ce:	4b72      	ldr	r3, [pc, #456]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a71      	ldr	r2, [pc, #452]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6e      	ldr	r2, [pc, #440]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	e00b      	b.n	8006900 <HAL_RCC_OscConfig+0xd4>
 80068e8:	4b6b      	ldr	r3, [pc, #428]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a6a      	ldr	r2, [pc, #424]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a67      	ldr	r2, [pc, #412]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80068fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006908:	f7fc fd36 	bl	8003378 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006910:	f7fc fd32 	bl	8003378 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b64      	cmp	r3, #100	; 0x64
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e200      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006922:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCC_OscConfig+0xe4>
 800692e:	e014      	b.n	800695a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006930:	f7fc fd22 	bl	8003378 <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006938:	f7fc fd1e 	bl	8003378 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b64      	cmp	r3, #100	; 0x64
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e1ec      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694a:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x10c>
 8006956:	e000      	b.n	800695a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d063      	beq.n	8006a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006966:	4b4c      	ldr	r3, [pc, #304]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f003 030c 	and.w	r3, r3, #12
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006972:	4b49      	ldr	r3, [pc, #292]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	2b08      	cmp	r3, #8
 800697c:	d11c      	bne.n	80069b8 <HAL_RCC_OscConfig+0x18c>
 800697e:	4b46      	ldr	r3, [pc, #280]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d116      	bne.n	80069b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698a:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_RCC_OscConfig+0x176>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d001      	beq.n	80069a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e1c0      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a2:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	4939      	ldr	r1, [pc, #228]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b6:	e03a      	b.n	8006a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d020      	beq.n	8006a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c0:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c6:	f7fc fcd7 	bl	8003378 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ce:	f7fc fcd3 	bl	8003378 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e1a1      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e0:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ec:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4927      	ldr	r1, [pc, #156]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	600b      	str	r3, [r1, #0]
 8006a00:	e015      	b.n	8006a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a02:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a08:	f7fc fcb6 	bl	8003378 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a10:	f7fc fcb2 	bl	8003378 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e180      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a22:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03a      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d019      	beq.n	8006a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_RCC_OscConfig+0x274>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a48:	f7fc fc96 	bl	8003378 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a50:	f7fc fc92 	bl	8003378 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e160      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <HAL_RCC_OscConfig+0x26c>)
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f000 fad8 	bl	8007024 <RCC_Delay>
 8006a74:	e01c      	b.n	8006ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <HAL_RCC_OscConfig+0x274>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7c:	f7fc fc7c 	bl	8003378 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a82:	e00f      	b.n	8006aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a84:	f7fc fc78 	bl	8003378 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d908      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e146      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
 8006a96:	bf00      	nop
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	42420000 	.word	0x42420000
 8006aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa4:	4b92      	ldr	r3, [pc, #584]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e9      	bne.n	8006a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a6 	beq.w	8006c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac2:	4b8b      	ldr	r3, [pc, #556]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4a87      	ldr	r2, [pc, #540]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	61d3      	str	r3, [r2, #28]
 8006ada:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <HAL_RCC_OscConfig+0x4c8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d118      	bne.n	8006b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006af6:	4b7f      	ldr	r3, [pc, #508]	; (8006cf4 <HAL_RCC_OscConfig+0x4c8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7e      	ldr	r2, [pc, #504]	; (8006cf4 <HAL_RCC_OscConfig+0x4c8>)
 8006afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b02:	f7fc fc39 	bl	8003378 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0a:	f7fc fc35 	bl	8003378 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b64      	cmp	r3, #100	; 0x64
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e103      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1c:	4b75      	ldr	r3, [pc, #468]	; (8006cf4 <HAL_RCC_OscConfig+0x4c8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCC_OscConfig+0x312>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6213      	str	r3, [r2, #32]
 8006b3c:	e02d      	b.n	8006b9a <HAL_RCC_OscConfig+0x36e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x334>
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	4a69      	ldr	r2, [pc, #420]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	6213      	str	r3, [r2, #32]
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	4a66      	ldr	r2, [pc, #408]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	6213      	str	r3, [r2, #32]
 8006b5e:	e01c      	b.n	8006b9a <HAL_RCC_OscConfig+0x36e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_OscConfig+0x356>
 8006b68:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	4a60      	ldr	r2, [pc, #384]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6213      	str	r3, [r2, #32]
 8006b74:	4b5e      	ldr	r3, [pc, #376]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6213      	str	r3, [r2, #32]
 8006b80:	e00b      	b.n	8006b9a <HAL_RCC_OscConfig+0x36e>
 8006b82:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	4a5a      	ldr	r2, [pc, #360]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	6213      	str	r3, [r2, #32]
 8006b8e:	4b58      	ldr	r3, [pc, #352]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	4a57      	ldr	r2, [pc, #348]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba2:	f7fc fbe9 	bl	8003378 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fc fbe5 	bl	8003378 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0b1      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ee      	beq.n	8006baa <HAL_RCC_OscConfig+0x37e>
 8006bcc:	e014      	b.n	8006bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bce:	f7fc fbd3 	bl	8003378 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fc fbcf 	bl	8003378 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e09b      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bec:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ee      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bfe:	4b3c      	ldr	r3, [pc, #240]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8087 	beq.w	8006d22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c14:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d061      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d146      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2e:	f7fc fba3 	bl	8003378 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fc fb9f 	bl	8003378 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e06d      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d108      	bne.n	8006c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4921      	ldr	r1, [pc, #132]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c70:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a19      	ldr	r1, [r3, #32]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	430b      	orrs	r3, r1
 8006c82:	491b      	ldr	r1, [pc, #108]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c88:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8e:	f7fc fb73 	bl	8003378 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c96:	f7fc fb6f 	bl	8003378 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e03d      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x46a>
 8006cb4:	e035      	b.n	8006d22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb6:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <HAL_RCC_OscConfig+0x4cc>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbc:	f7fc fb5c 	bl	8003378 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fc fb58 	bl	8003378 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e026      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_RCC_OscConfig+0x4c4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x498>
 8006ce2:	e01e      	b.n	8006d22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d107      	bne.n	8006cfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e019      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	40007000 	.word	0x40007000
 8006cf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_RCC_OscConfig+0x500>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40021000 	.word	0x40021000

08006d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0d0      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d44:	4b6a      	ldr	r3, [pc, #424]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d910      	bls.n	8006d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b67      	ldr	r3, [pc, #412]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f023 0207 	bic.w	r2, r3, #7
 8006d5a:	4965      	ldr	r1, [pc, #404]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d62:	4b63      	ldr	r3, [pc, #396]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0b8      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d020      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d8c:	4b59      	ldr	r3, [pc, #356]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a58      	ldr	r2, [pc, #352]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006da4:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a52      	ldr	r2, [pc, #328]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006daa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db0:	4b50      	ldr	r3, [pc, #320]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	494d      	ldr	r1, [pc, #308]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d040      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd6:	4b47      	ldr	r3, [pc, #284]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d115      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e07f      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d107      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dee:	4b41      	ldr	r3, [pc, #260]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e073      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dfe:	4b3d      	ldr	r3, [pc, #244]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e06b      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e0e:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f023 0203 	bic.w	r2, r3, #3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4936      	ldr	r1, [pc, #216]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e20:	f7fc faaa 	bl	8003378 <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e28:	f7fc faa6 	bl	8003378 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e053      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 020c 	and.w	r2, r3, #12
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d1eb      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d210      	bcs.n	8006e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e5e:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 0207 	bic.w	r2, r3, #7
 8006e66:	4922      	ldr	r1, [pc, #136]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e032      	b.n	8006ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4916      	ldr	r1, [pc, #88]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	490e      	ldr	r1, [pc, #56]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ebe:	f000 f821 	bl	8006f04 <HAL_RCC_GetSysClockFreq>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	490a      	ldr	r1, [pc, #40]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed0:	5ccb      	ldrb	r3, [r1, r3]
 8006ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <HAL_RCC_ClockConfig+0x1cc>)
 8006ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <HAL_RCC_ClockConfig+0x1d0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fc fa08 	bl	80032f4 <HAL_InitTick>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40022000 	.word	0x40022000
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	08007dcc 	.word	0x08007dcc
 8006efc:	20000000 	.word	0x20000000
 8006f00:	20000004 	.word	0x20000004

08006f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f04:	b490      	push	{r4, r7}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f0c:	1d3c      	adds	r4, r7, #4
 8006f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f14:	f240 2301 	movw	r3, #513	; 0x201
 8006f18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	2300      	movs	r3, #0
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f2e:	4b21      	ldr	r3, [pc, #132]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d002      	beq.n	8006f44 <HAL_RCC_GetSysClockFreq+0x40>
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d003      	beq.n	8006f4a <HAL_RCC_GetSysClockFreq+0x46>
 8006f42:	e02b      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f46:	623b      	str	r3, [r7, #32]
      break;
 8006f48:	e02b      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	0c9b      	lsrs	r3, r3, #18
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	3328      	adds	r3, #40	; 0x28
 8006f54:	443b      	add	r3, r7
 8006f56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d012      	beq.n	8006f8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	0c5b      	lsrs	r3, r3, #17
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	3328      	adds	r3, #40	; 0x28
 8006f72:	443b      	add	r3, r7
 8006f74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f7e:	fb03 f202 	mul.w	r2, r3, r2
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8a:	e004      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	4a0b      	ldr	r2, [pc, #44]	; (8006fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	623b      	str	r3, [r7, #32]
      break;
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f9e:	623b      	str	r3, [r7, #32]
      break;
 8006fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3728      	adds	r7, #40	; 0x28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc90      	pop	{r4, r7}
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	08007dbc 	.word	0x08007dbc
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	007a1200 	.word	0x007a1200
 8006fbc:	003d0900 	.word	0x003d0900

08006fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr
 8006fd0:	20000000 	.word	0x20000000

08006fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fd8:	f7ff fff2 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	4903      	ldr	r1, [pc, #12]	; (8006ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fea:	5ccb      	ldrb	r3, [r1, r3]
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	08007ddc 	.word	0x08007ddc

08006ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007000:	f7ff ffde 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	0adb      	lsrs	r3, r3, #11
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4903      	ldr	r1, [pc, #12]	; (8007020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40021000 	.word	0x40021000
 8007020:	08007ddc 	.word	0x08007ddc

08007024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <RCC_Delay+0x34>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a0a      	ldr	r2, [pc, #40]	; (800705c <RCC_Delay+0x38>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0a5b      	lsrs	r3, r3, #9
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007040:	bf00      	nop
  }
  while (Delay --);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	60fa      	str	r2, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f9      	bne.n	8007040 <RCC_Delay+0x1c>
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	20000000 	.word	0x20000000
 800705c:	10624dd3 	.word	0x10624dd3

08007060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e03f      	b.n	80070f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fb feac 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	; 0x24
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fd7f 	bl	8007ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b08a      	sub	sp, #40	; 0x28
 80070fe:	af02      	add	r7, sp, #8
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d17c      	bne.n	8007214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_Transmit+0x2c>
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e075      	b.n	8007216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UART_Transmit+0x3e>
 8007134:	2302      	movs	r3, #2
 8007136:	e06e      	b.n	8007216 <HAL_UART_Transmit+0x11c>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2221      	movs	r2, #33	; 0x21
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714e:	f7fc f913 	bl	8003378 <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d108      	bne.n	800717c <HAL_UART_Transmit+0x82>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e003      	b.n	8007184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800718c:	e02a      	b.n	80071e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2200      	movs	r2, #0
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 faf1 	bl	8007780 <UART_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e036      	b.n	8007216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3302      	adds	r3, #2
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e007      	b.n	80071d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cf      	bne.n	800718e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2140      	movs	r1, #64	; 0x40
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fac1 	bl	8007780 <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e006      	b.n	8007216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b20      	cmp	r3, #32
 8007236:	d11d      	bne.n	8007274 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Receive_DMA+0x26>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e016      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_UART_Receive_DMA+0x38>
 8007252:	2302      	movs	r3, #2
 8007254:	e00f      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	461a      	mov	r2, r3
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fad2 	bl	8007814 <UART_Start_Receive_DMA>
 8007270:	4603      	mov	r3, r0
 8007272:	e000      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52>
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fbc2 	bl	8007a54 <UART_Receive_IT>
      return;
 80072d0:	e17b      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80b1 	beq.w	800743c <HAL_UART_IRQHandler+0x1bc>
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <HAL_UART_IRQHandler+0x70>
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80a6 	beq.w	800743c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_UART_IRQHandler+0x90>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	f043 0201 	orr.w	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_UART_IRQHandler+0xb0>
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	f043 0202 	orr.w	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_UART_IRQHandler+0xd0>
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00f      	beq.n	800737a <HAL_UART_IRQHandler+0xfa>
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <HAL_UART_IRQHandler+0xee>
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0208 	orr.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 811e 	beq.w	80075c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_UART_IRQHandler+0x11e>
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb5b 	bl	8007a54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bf14      	ite	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	2300      	moveq	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HAL_UART_IRQHandler+0x146>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d031      	beq.n	800742a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa9d 	bl	8007906 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d023      	beq.n	8007422 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	4a76      	ldr	r2, [pc, #472]	; (80075d0 <HAL_UART_IRQHandler+0x350>)
 80073f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fc f9f8 	bl	80037f4 <HAL_DMA_Abort_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e00e      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8ec 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e00a      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8e8 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	e006      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f8e4 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007436:	e0c3      	b.n	80075c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007438:	bf00      	nop
    return;
 800743a:	e0c1      	b.n	80075c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 80a1 	bne.w	8007588 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 809b 	beq.w	8007588 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8095 	beq.w	8007588 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d04e      	beq.n	8007520 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8098 	beq.w	80075c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007498:	8a3a      	ldrh	r2, [r7, #16]
 800749a:	429a      	cmp	r2, r3
 800749c:	f080 8092 	bcs.w	80075c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8a3a      	ldrh	r2, [r7, #16]
 80074a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d02b      	beq.n	8007508 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695a      	ldr	r2, [r3, #20]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695a      	ldr	r2, [r3, #20]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0210 	bic.w	r2, r2, #16
 80074fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	4618      	mov	r0, r3
 8007504:	f7fc f93b 	bl	800377e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007510:	b29b      	uxth	r3, r3
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	b29b      	uxth	r3, r3
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f876 	bl	800760a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800751e:	e051      	b.n	80075c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007528:	b29b      	uxth	r3, r3
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d047      	beq.n	80075c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007538:	8a7b      	ldrh	r3, [r7, #18]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d044      	beq.n	80075c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800754c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695a      	ldr	r2, [r3, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0210 	bic.w	r2, r2, #16
 800757a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800757c:	8a7b      	ldrh	r3, [r7, #18]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f842 	bl	800760a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007586:	e01f      	b.n	80075c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <HAL_UART_IRQHandler+0x324>
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f2 	bl	8007986 <UART_Transmit_IT>
    return;
 80075a2:	e012      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <HAL_UART_IRQHandler+0x34a>
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa33 	bl	8007a24 <UART_EndTransmit_IT>
    return;
 80075be:	e004      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
    return;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
      return;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
      return;
 80075c8:	bf00      	nop
  }
}
 80075ca:	3728      	adds	r7, #40	; 0x28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	0800795f 	.word	0x0800795f

080075d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr

080075e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr

08007620 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d12a      	bne.n	8007692 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007650:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007670:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	2b01      	cmp	r3, #1
 8007680:	d107      	bne.n	8007692 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0210 	bic.w	r2, r2, #16
 8007690:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	2b01      	cmp	r3, #1
 8007698:	d106      	bne.n	80076a8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800769e:	4619      	mov	r1, r3
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ffb2 	bl	800760a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076a6:	e002      	b.n	80076ae <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7f9 fec1 	bl	8001430 <HAL_UART_RxCpltCallback>
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d108      	bne.n	80076de <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4619      	mov	r1, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff ff97 	bl	800760a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076dc:	e002      	b.n	80076e4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff ff81 	bl	80075e6 <HAL_UART_RxHalfCpltCallback>
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b21      	cmp	r3, #33	; 0x21
 800771e:	d108      	bne.n	8007732 <UART_DMAError+0x46>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800772c:	68b8      	ldr	r0, [r7, #8]
 800772e:	f000 f8d5 	bl	80078dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	bf14      	ite	ne
 8007740:	2301      	movne	r3, #1
 8007742:	2300      	moveq	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b22      	cmp	r3, #34	; 0x22
 8007752:	d108      	bne.n	8007766 <UART_DMAError+0x7a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f000 f8d0 	bl	8007906 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f043 0210 	orr.w	r2, r3, #16
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007772:	68b8      	ldr	r0, [r7, #8]
 8007774:	f7ff ff40 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007790:	e02c      	b.n	80077ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d028      	beq.n	80077ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077a0:	f7fb fdea 	bl	8003378 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d21d      	bcs.n	80077ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695a      	ldr	r2, [r3, #20]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e00f      	b.n	800780c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4013      	ands	r3, r2
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	bf0c      	ite	eq
 80077fc:	2301      	moveq	r3, #1
 80077fe:	2300      	movne	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	429a      	cmp	r2, r3
 8007808:	d0c3      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <UART_Start_Receive_DMA+0xbc>)
 8007842:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <UART_Start_Receive_DMA+0xc0>)
 800784a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <UART_Start_Receive_DMA+0xc4>)
 8007852:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	2200      	movs	r2, #0
 800785a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	f7fb ff24 	bl	80036c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695a      	ldr	r2, [r3, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f042 0201 	orr.w	r2, r2, #1
 80078b4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	08007621 	.word	0x08007621
 80078d4:	080076b7 	.word	0x080076b7
 80078d8:	080076ed 	.word	0x080076ed

080078dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80078f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800791c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	2b01      	cmp	r3, #1
 8007934:	d107      	bne.n	8007946 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0210 	bic.w	r2, r2, #16
 8007944:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fe3d 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b21      	cmp	r3, #33	; 0x21
 8007998:	d13e      	bne.n	8007a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	d114      	bne.n	80079ce <UART_Transmit_IT+0x48>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d110      	bne.n	80079ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	1c9a      	adds	r2, r3, #2
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	621a      	str	r2, [r3, #32]
 80079cc:	e008      	b.n	80079e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6211      	str	r1, [r2, #32]
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4619      	mov	r1, r3
 80079ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10f      	bne.n	8007a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fdc5 	bl	80075d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b22      	cmp	r3, #34	; 0x22
 8007a66:	f040 8099 	bne.w	8007b9c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	d117      	bne.n	8007aa4 <UART_Receive_IT+0x50>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d113      	bne.n	8007aa4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	1c9a      	adds	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8007aa2:	e026      	b.n	8007af2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab6:	d007      	beq.n	8007ac8 <UART_Receive_IT+0x74>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x82>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4619      	mov	r1, r3
 8007b00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d148      	bne.n	8007b98 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0220 	bic.w	r2, r2, #32
 8007b14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d123      	bne.n	8007b8e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0210 	bic.w	r2, r2, #16
 8007b5a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d10a      	bne.n	8007b80 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fd3f 	bl	800760a <HAL_UARTEx_RxEventCallback>
 8007b8c:	e002      	b.n	8007b94 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7f9 fc4e 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e002      	b.n	8007b9e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007b9c:	2302      	movs	r3, #2
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007be2:	f023 030c 	bic.w	r3, r3, #12
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	430b      	orrs	r3, r1
 8007bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2c      	ldr	r2, [pc, #176]	; (8007cbc <UART_SetConfig+0x114>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d103      	bne.n	8007c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7ff f9f4 	bl	8006ffc <HAL_RCC_GetPCLK2Freq>
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	e002      	b.n	8007c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7ff f9dc 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009a      	lsls	r2, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <UART_SetConfig+0x118>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	0119      	lsls	r1, r3, #4
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009a      	lsls	r2, r3, #2
 8007c48:	441a      	add	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <UART_SetConfig+0x118>)
 8007c56:	fba3 0302 	umull	r0, r3, r3, r2
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	2064      	movs	r0, #100	; 0x64
 8007c5e:	fb00 f303 	mul.w	r3, r0, r3
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	3332      	adds	r3, #50	; 0x32
 8007c68:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <UART_SetConfig+0x118>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c74:	4419      	add	r1, r3
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009a      	lsls	r2, r3, #2
 8007c80:	441a      	add	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <UART_SetConfig+0x118>)
 8007c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	2064      	movs	r0, #100	; 0x64
 8007c96:	fb00 f303 	mul.w	r3, r0, r3
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	3332      	adds	r3, #50	; 0x32
 8007ca0:	4a07      	ldr	r2, [pc, #28]	; (8007cc0 <UART_SetConfig+0x118>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007cb4:	bf00      	nop
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40013800 	.word	0x40013800
 8007cc0:	51eb851f 	.word	0x51eb851f

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	4d0c      	ldr	r5, [pc, #48]	; (8007cfc <__libc_init_array+0x38>)
 8007cca:	4c0d      	ldr	r4, [pc, #52]	; (8007d00 <__libc_init_array+0x3c>)
 8007ccc:	1b64      	subs	r4, r4, r5
 8007cce:	10a4      	asrs	r4, r4, #2
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	f000 f822 	bl	8007d1c <_init>
 8007cd8:	2600      	movs	r6, #0
 8007cda:	4d0a      	ldr	r5, [pc, #40]	; (8007d04 <__libc_init_array+0x40>)
 8007cdc:	4c0a      	ldr	r4, [pc, #40]	; (8007d08 <__libc_init_array+0x44>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	08007de4 	.word	0x08007de4
 8007d00:	08007de4 	.word	0x08007de4
 8007d04:	08007de4 	.word	0x08007de4
 8007d08:	08007de8 	.word	0x08007de8

08007d0c <memset>:
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4402      	add	r2, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
